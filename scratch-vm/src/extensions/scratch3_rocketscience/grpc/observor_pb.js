// source: observor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AntennaSnapshot', null, global);
goog.exportSymbol('proto.AntennaSnapshot.AntennaState', null, global);
goog.exportSymbol('proto.AttitudeInfo', null, global);
goog.exportSymbol('proto.CargoBaySnapshot', null, global);
goog.exportSymbol('proto.CargoBaySnapshot.CargoBayState', null, global);
goog.exportSymbol('proto.ControlSurfaceSnapshot', null, global);
goog.exportSymbol('proto.ConverterSnapshot', null, global);
goog.exportSymbol('proto.ConverterSnapshot.ResourceConverterState', null, global);
goog.exportSymbol('proto.DecouplerSnapshot', null, global);
goog.exportSymbol('proto.DockingPortSnapshot', null, global);
goog.exportSymbol('proto.DockingPortSnapshot.DockingPortState', null, global);
goog.exportSymbol('proto.EngineSnapshot', null, global);
goog.exportSymbol('proto.FairingSnapshot', null, global);
goog.exportSymbol('proto.FlightSnapshot', null, global);
goog.exportSymbol('proto.FlightSnapshotRequest', null, global);
goog.exportSymbol('proto.FlightSnapshotRequest.OFlight', null, global);
goog.exportSymbol('proto.IntakeSnapshot', null, global);
goog.exportSymbol('proto.LegSnapshot', null, global);
goog.exportSymbol('proto.LegSnapshot.LegState', null, global);
goog.exportSymbol('proto.LightSnapshot', null, global);
goog.exportSymbol('proto.NavBallMarker', null, global);
goog.exportSymbol('proto.OrbitSnapshot', null, global);
goog.exportSymbol('proto.OrbitSnapshotRequest', null, global);
goog.exportSymbol('proto.OrbitSnapshotRequest.OOrbit', null, global);
goog.exportSymbol('proto.ParachuteSnapshot', null, global);
goog.exportSymbol('proto.ParachuteSnapshot.DeploymentSafeState', null, global);
goog.exportSymbol('proto.ParachuteSnapshot.ParachuteState', null, global);
goog.exportSymbol('proto.PartSnapshot', null, global);
goog.exportSymbol('proto.PartSnapshotRequest', null, global);
goog.exportSymbol('proto.PartSnapshotRequest.OPart', null, global);
goog.exportSymbol('proto.Propellant', null, global);
goog.exportSymbol('proto.QuaternionD', null, global);
goog.exportSymbol('proto.RCSSnapshot', null, global);
goog.exportSymbol('proto.RadiatorSnapshot', null, global);
goog.exportSymbol('proto.RadiatorSnapshot.RadiatorState', null, global);
goog.exportSymbol('proto.ReactionWheelSnapshot', null, global);
goog.exportSymbol('proto.ReactionWheelSnapshot.ReactionWheelState', null, global);
goog.exportSymbol('proto.ResourceConverterSnapshot', null, global);
goog.exportSymbol('proto.ResourceHarvesterSnapshot', null, global);
goog.exportSymbol('proto.ResourceHarvesterSnapshot.ResourceHarvesterState', null, global);
goog.exportSymbol('proto.SensorSnapshot', null, global);
goog.exportSymbol('proto.SnapshotRequest', null, global);
goog.exportSymbol('proto.SnapshotResponse', null, global);
goog.exportSymbol('proto.SolarPanelSnapshot', null, global);
goog.exportSymbol('proto.SolarPanelSnapshot.SolarPanelState', null, global);
goog.exportSymbol('proto.Vector3d', null, global);
goog.exportSymbol('proto.VesselResource', null, global);
goog.exportSymbol('proto.VesselSnapshot', null, global);
goog.exportSymbol('proto.VesselSnapshot.SASMode', null, global);
goog.exportSymbol('proto.VesselSnapshot.VesselSituation', null, global);
goog.exportSymbol('proto.VesselSnapshotRequest', null, global);
goog.exportSymbol('proto.VesselSnapshotRequest.OVessel', null, global);
goog.exportSymbol('proto.WheelSnapshot', null, global);
goog.exportSymbol('proto.WheelSnapshot.MotorState', null, global);
goog.exportSymbol('proto.WheelSnapshot.WheelState', null, global);
goog.exportSymbol('proto.WheelSnapshot.WheelType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PartSnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PartSnapshotRequest.repeatedFields_, null);
};
goog.inherits(proto.PartSnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PartSnapshotRequest.displayName = 'proto.PartSnapshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VesselSnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VesselSnapshotRequest.repeatedFields_, null);
};
goog.inherits(proto.VesselSnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VesselSnapshotRequest.displayName = 'proto.VesselSnapshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FlightSnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FlightSnapshotRequest.repeatedFields_, null);
};
goog.inherits(proto.FlightSnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FlightSnapshotRequest.displayName = 'proto.FlightSnapshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrbitSnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OrbitSnapshotRequest.repeatedFields_, null);
};
goog.inherits(proto.OrbitSnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OrbitSnapshotRequest.displayName = 'proto.OrbitSnapshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SnapshotRequest.repeatedFields_, null);
};
goog.inherits(proto.SnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SnapshotRequest.displayName = 'proto.SnapshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VesselResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VesselResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VesselResource.displayName = 'proto.VesselResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VesselSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VesselSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VesselSnapshot.displayName = 'proto.VesselSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vector3d = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vector3d, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vector3d.displayName = 'proto.Vector3d';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QuaternionD = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QuaternionD, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.QuaternionD.displayName = 'proto.QuaternionD';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NavBallMarker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NavBallMarker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NavBallMarker.displayName = 'proto.NavBallMarker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AttitudeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AttitudeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AttitudeInfo.displayName = 'proto.AttitudeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FlightSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FlightSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FlightSnapshot.displayName = 'proto.FlightSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrbitSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OrbitSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OrbitSnapshot.displayName = 'proto.OrbitSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WheelSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WheelSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WheelSnapshot.displayName = 'proto.WheelSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SolarPanelSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SolarPanelSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SolarPanelSnapshot.displayName = 'proto.SolarPanelSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SensorSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SensorSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SensorSnapshot.displayName = 'proto.SensorSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResourceHarvesterSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResourceHarvesterSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ResourceHarvesterSnapshot.displayName = 'proto.ResourceHarvesterSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConverterSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConverterSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConverterSnapshot.displayName = 'proto.ConverterSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResourceConverterSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResourceConverterSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ResourceConverterSnapshot.displayName = 'proto.ResourceConverterSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReactionWheelSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReactionWheelSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReactionWheelSnapshot.displayName = 'proto.ReactionWheelSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RCSSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RCSSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RCSSnapshot.displayName = 'proto.RCSSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RadiatorSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RadiatorSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RadiatorSnapshot.displayName = 'proto.RadiatorSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParachuteSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParachuteSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ParachuteSnapshot.displayName = 'proto.ParachuteSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LightSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LightSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LightSnapshot.displayName = 'proto.LightSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LegSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LegSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LegSnapshot.displayName = 'proto.LegSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IntakeSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IntakeSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IntakeSnapshot.displayName = 'proto.IntakeSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FairingSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FairingSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FairingSnapshot.displayName = 'proto.FairingSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Propellant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Propellant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Propellant.displayName = 'proto.Propellant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EngineSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EngineSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EngineSnapshot.displayName = 'proto.EngineSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DockingPortSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DockingPortSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DockingPortSnapshot.displayName = 'proto.DockingPortSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DecouplerSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DecouplerSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DecouplerSnapshot.displayName = 'proto.DecouplerSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControlSurfaceSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ControlSurfaceSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ControlSurfaceSnapshot.displayName = 'proto.ControlSurfaceSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CargoBaySnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CargoBaySnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CargoBaySnapshot.displayName = 'proto.CargoBaySnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AntennaSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AntennaSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AntennaSnapshot.displayName = 'proto.AntennaSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PartSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PartSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PartSnapshot.displayName = 'proto.PartSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SnapshotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SnapshotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SnapshotResponse.displayName = 'proto.SnapshotResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PartSnapshotRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PartSnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PartSnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PartSnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PartSnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    partid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    itemsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PartSnapshotRequest}
 */
proto.PartSnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PartSnapshotRequest;
  return proto.PartSnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PartSnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PartSnapshotRequest}
 */
proto.PartSnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartid(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.PartSnapshotRequest.OPart>} */ (reader.readPackedEnum());
      msg.setItemsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PartSnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PartSnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PartSnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PartSnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.PartSnapshotRequest.OPart = {
  PARTMASS: 0,
  PARTSHIELDED: 1,
  PARTTEMPERATURE: 2,
  PARTSKINTEMPERATURE: 3,
  ANTENNASTATE: 4,
  CARGOBAYSTATE: 5,
  CARGOBAYDEPLOYPERCENT: 6,
  CONTROLSURFACEPITCHENABLED: 7,
  CONTROLSURFACEYAWENABLED: 8,
  CONTROLSURFACEROLLENABLED: 9,
  CONTROLSURFACEAUTHORITYLIMITER: 10,
  CONTROLSURFACEDEPLOYED: 11,
  DECOUPLERDECOUPLED: 12,
  DOCKINGPORTSTATE: 13,
  DOCKINGPORTSHIELDED: 14,
  ENGINEACTIVE: 15,
  ENGINETHRUST: 16,
  ENGINETHRUSTPERCENTAGE: 17,
  ENGINETHROTTLE: 18,
  ENGINESPECIFICIMPULSE: 19,
  ENGINEVACUUMSPECIFICIMPULSE: 20,
  ENGINEPROPELLANTINFO: 21,
  ENGINEHASFUEL: 22,
  ENGINEMODE: 23,
  ENGINEAUTOSWITCHMODE: 24,
  ENGINEGIMBALLIMIT: 25,
  FARINGJETTISONED: 26,
  INTAKEOPEN: 27,
  INTAKESPEED: 28,
  INTAKEFLOW: 29,
  LEGSTATE: 30,
  LEGDEPLOYED: 31,
  LEGGROUNDED: 32,
  LIGHTON: 33,
  PARACHUTESTATE: 34,
  PARACHUTEDEPLOYED: 35,
  PARACHUTEDEPLOYALTITUDE: 36,
  PARACHUTEDEPLOYMINPRESSURE: 37,
  PARACHUTEDEPLOYMENTSAFESTATE: 38,
  RADIATORSTATE: 39,
  RADIATORDEPLOYED: 40,
  RADIATORCOOLING: 41,
  RCSENABLED: 42,
  RCSTHRUSTLIMIT: 43,
  RCSPITCHENABLED: 44,
  RCSYAWENABLED: 45,
  RCSROLLENABLED: 46,
  RCSUPENABLED: 47,
  RCSFORWARDENABLED: 48,
  RCSRIGHTENABLED: 49,
  RCSHASFUEL: 50,
  RCSPROPELLANTINFO: 51,
  REACTIONWHEELSTATE: 52,
  RESOURCECONVERTERSTATE: 53,
  RESOURCECONVERTERTHERMALEFFICIENCY: 54,
  RESOURCECONVERTERCORETEMPERATURE: 55,
  RESOURCECONVERTERSTATUS: 56,
  RESOURCECONVERTERACTIVE: 57,
  RESOURCEHARVESTERSTATE: 58,
  RESOURCEHARVESTERDEPLOYED: 59,
  RESOURCEHARVESTERACTIVATED: 60,
  RESOURCEHARVESTEREXTRACTIONRATE: 61,
  RESOURCEHARVESTERTHERMALEFFICIENCY: 62,
  RESOURCEHARVESTERCORETEMPERATURE: 63,
  SENSORACTIVATED: 64,
  SENSORREADING: 65,
  SOLARPANELSTATE: 66,
  SOLARPANELDEPLOYED: 67,
  SOLARPANELENERGYFLOW: 68,
  SOLARPANELSUNEXPOSURE: 69,
  WHEELSTATE: 70,
  WHEELGROUNDED: 71,
  WHEELDEPLOYED: 72,
  WHEELPOWERED: 73,
  WHEELMOTORENABLED: 74,
  WHEELMOTORSTATE: 75,
  WHEELMOTOROUTPUT: 76,
  WHEELINVERTED: 77,
  WHEELAUTOFRICTIONCONTROLENABLED: 78,
  WHEELMANUALFRICTIONCONTROL: 79,
  WHEELTRACTIONCONTROLENABLED: 80,
  WHEELTRACTIONCONTROL: 81,
  WHEELDRIVELIMITER: 82,
  WHEELSTEERINGENABLED: 83,
  WHEELSTEERINGINVERTED: 84,
  WHEELBROKEN: 85,
  WHEELSTRESS: 86,
  WHEELSTRESSPERCENTAGE: 87,
  WHEELDEFLECTION: 88,
  WHEELSLIP: 89
};

/**
 * optional int64 partId = 1;
 * @return {number}
 */
proto.PartSnapshotRequest.prototype.getPartid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PartSnapshotRequest} returns this
 */
proto.PartSnapshotRequest.prototype.setPartid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated OPart items = 2;
 * @return {!Array<!proto.PartSnapshotRequest.OPart>}
 */
proto.PartSnapshotRequest.prototype.getItemsList = function() {
  return /** @type {!Array<!proto.PartSnapshotRequest.OPart>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.PartSnapshotRequest.OPart>} value
 * @return {!proto.PartSnapshotRequest} returns this
 */
proto.PartSnapshotRequest.prototype.setItemsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.PartSnapshotRequest.OPart} value
 * @param {number=} opt_index
 * @return {!proto.PartSnapshotRequest} returns this
 */
proto.PartSnapshotRequest.prototype.addItems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PartSnapshotRequest} returns this
 */
proto.PartSnapshotRequest.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VesselSnapshotRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VesselSnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.VesselSnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VesselSnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VesselSnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VesselSnapshotRequest}
 */
proto.VesselSnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VesselSnapshotRequest;
  return proto.VesselSnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VesselSnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VesselSnapshotRequest}
 */
proto.VesselSnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.VesselSnapshotRequest.OVessel>} */ (reader.readPackedEnum());
      msg.setItemsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VesselSnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VesselSnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VesselSnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VesselSnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VesselSnapshotRequest.OVessel = {
  _V: 0,
  SITUATION: 1,
  MET: 2,
  BIOME: 3,
  MASS: 4,
  STAGE: 5,
  STAGERESOURCES: 6,
  TOTALRESOURCES: 7,
  SAS_MODE: 8,
  ORBITINGBODY: 9,
  MAINTHROTTLE: 10,
  SASENABLED: 11,
  RCSENABLED: 12,
  GEARENABLED: 13,
  LIGHTENABLED: 14,
  BRAKESENABLED: 15
};

/**
 * repeated OVessel items = 1;
 * @return {!Array<!proto.VesselSnapshotRequest.OVessel>}
 */
proto.VesselSnapshotRequest.prototype.getItemsList = function() {
  return /** @type {!Array<!proto.VesselSnapshotRequest.OVessel>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.VesselSnapshotRequest.OVessel>} value
 * @return {!proto.VesselSnapshotRequest} returns this
 */
proto.VesselSnapshotRequest.prototype.setItemsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.VesselSnapshotRequest.OVessel} value
 * @param {number=} opt_index
 * @return {!proto.VesselSnapshotRequest} returns this
 */
proto.VesselSnapshotRequest.prototype.addItems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VesselSnapshotRequest} returns this
 */
proto.VesselSnapshotRequest.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FlightSnapshotRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FlightSnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FlightSnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FlightSnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlightSnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FlightSnapshotRequest}
 */
proto.FlightSnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FlightSnapshotRequest;
  return proto.FlightSnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FlightSnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FlightSnapshotRequest}
 */
proto.FlightSnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.FlightSnapshotRequest.OFlight>} */ (reader.readPackedEnum());
      msg.setItemsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FlightSnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FlightSnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FlightSnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlightSnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.FlightSnapshotRequest.OFlight = {
  _F: 0,
  GFORCE: 1,
  MEANALTITUDE: 2,
  SURFACEALTITUDE: 3,
  BEDROCKALTITUDE: 4,
  ELEVATION: 5,
  LATITUDE: 6,
  LONGITUDE: 7,
  SURFACESPEED: 8,
  HORIZONTALSPEED: 9,
  VERTICALSPEED: 10,
  PITCH: 11,
  YAW: 12,
  ROLL: 13,
  ATMOSPHEREDENSITY: 14,
  DYNAMICPRESSURE: 15,
  STATICPRESSUREATMSL: 16,
  STATICPRESSURE: 17,
  SPEEDOFSOUND: 18,
  MACH: 19,
  TRUEAIRSPEED: 20,
  ANGLEOFATTACK: 21,
  TOTALAIRTEMPERATURE: 22,
  STATICAIRTEMPERATURE: 23,
  ORBITSPEED: 24,
  MISSIONTIME: 25,
  SIDESLIPANGLE: 26,
  SURFACEVELOCITYPROGRADE: 27,
  ORBITALVELOCITYPROGRADE: 28,
  NAVBALLANGLES: 29,
  EXTERNALTEMPERATURE: 30,
  TWRACTUAL: 31,
  TWRMAXTHRUST: 32,
  TWRMAXTHRUSTNOLIMIT: 33,
  DRAGFORCE: 34,
  LIFTFORCE: 35,
  TERMINALVELOCITY: 36,
  LIFTUPFORCE: 37,
  ATTITUDEDATA: 38,
  UT: 39,
  NAVMODE: 40,
  STALLFRACTION: 41,
  DRAGCOEFFICIENT: 42,
  LIFTCOEFFICIENT: 43,
  BALLISTICCOEFFICIENT: 44,
  TSFC: 45,
  REYNOLDSNUMBER: 46,
  TWRDATA: 47
};

/**
 * repeated OFlight items = 1;
 * @return {!Array<!proto.FlightSnapshotRequest.OFlight>}
 */
proto.FlightSnapshotRequest.prototype.getItemsList = function() {
  return /** @type {!Array<!proto.FlightSnapshotRequest.OFlight>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.FlightSnapshotRequest.OFlight>} value
 * @return {!proto.FlightSnapshotRequest} returns this
 */
proto.FlightSnapshotRequest.prototype.setItemsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.FlightSnapshotRequest.OFlight} value
 * @param {number=} opt_index
 * @return {!proto.FlightSnapshotRequest} returns this
 */
proto.FlightSnapshotRequest.prototype.addItems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FlightSnapshotRequest} returns this
 */
proto.FlightSnapshotRequest.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OrbitSnapshotRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrbitSnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.OrbitSnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrbitSnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrbitSnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrbitSnapshotRequest}
 */
proto.OrbitSnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrbitSnapshotRequest;
  return proto.OrbitSnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrbitSnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrbitSnapshotRequest}
 */
proto.OrbitSnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.OrbitSnapshotRequest.OOrbit>} */ (reader.readPackedEnum());
      msg.setItemsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrbitSnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrbitSnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrbitSnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrbitSnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.OrbitSnapshotRequest.OOrbit = {
  _O: 0,
  BODYNAME: 1,
  APOAPSIS: 2,
  PERIAPSIS: 3,
  APOAPSISALTITUDE: 4,
  PERIAPSISALTITUDE: 5,
  SEMIMAJORAXIS: 6,
  SEMIMINORAXIS: 7,
  RADIUS: 8,
  SPEED: 9,
  PERIOD: 10,
  TIMETOAPOAPSIS: 11,
  TIMETOPERIAPSIS: 12,
  ECCENTRICITY: 13,
  INCLINATION: 14,
  LONGITUDEOFASCENDINGNODE: 15,
  ARGUMENTOFPERIAPSIS: 16,
  MEANANOMALYATEPOCH: 17,
  EPOCH: 18,
  MEANANOMALY: 19,
  ECCENTRICANOMALY: 20,
  TRUEANOMALY: 21,
  TIMETOSOICHANGE: 22,
  ORBITALSPEED: 23
};

/**
 * repeated OOrbit items = 1;
 * @return {!Array<!proto.OrbitSnapshotRequest.OOrbit>}
 */
proto.OrbitSnapshotRequest.prototype.getItemsList = function() {
  return /** @type {!Array<!proto.OrbitSnapshotRequest.OOrbit>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.OrbitSnapshotRequest.OOrbit>} value
 * @return {!proto.OrbitSnapshotRequest} returns this
 */
proto.OrbitSnapshotRequest.prototype.setItemsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.OrbitSnapshotRequest.OOrbit} value
 * @param {number=} opt_index
 * @return {!proto.OrbitSnapshotRequest} returns this
 */
proto.OrbitSnapshotRequest.prototype.addItems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.OrbitSnapshotRequest} returns this
 */
proto.OrbitSnapshotRequest.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SnapshotRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    vesselid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vessel: (f = msg.getVessel()) && proto.VesselSnapshotRequest.toObject(includeInstance, f),
    flight: (f = msg.getFlight()) && proto.FlightSnapshotRequest.toObject(includeInstance, f),
    orbit: (f = msg.getOrbit()) && proto.OrbitSnapshotRequest.toObject(includeInstance, f),
    partsList: jspb.Message.toObjectList(msg.getPartsList(),
    proto.PartSnapshotRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SnapshotRequest}
 */
proto.SnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SnapshotRequest;
  return proto.SnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SnapshotRequest}
 */
proto.SnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVesselid(value);
      break;
    case 2:
      var value = new proto.VesselSnapshotRequest;
      reader.readMessage(value,proto.VesselSnapshotRequest.deserializeBinaryFromReader);
      msg.setVessel(value);
      break;
    case 3:
      var value = new proto.FlightSnapshotRequest;
      reader.readMessage(value,proto.FlightSnapshotRequest.deserializeBinaryFromReader);
      msg.setFlight(value);
      break;
    case 4:
      var value = new proto.OrbitSnapshotRequest;
      reader.readMessage(value,proto.OrbitSnapshotRequest.deserializeBinaryFromReader);
      msg.setOrbit(value);
      break;
    case 5:
      var value = new proto.PartSnapshotRequest;
      reader.readMessage(value,proto.PartSnapshotRequest.deserializeBinaryFromReader);
      msg.addParts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVesselid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVessel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VesselSnapshotRequest.serializeBinaryToWriter
    );
  }
  f = message.getFlight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.FlightSnapshotRequest.serializeBinaryToWriter
    );
  }
  f = message.getOrbit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OrbitSnapshotRequest.serializeBinaryToWriter
    );
  }
  f = message.getPartsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.PartSnapshotRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string vesselId = 1;
 * @return {string}
 */
proto.SnapshotRequest.prototype.getVesselid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SnapshotRequest} returns this
 */
proto.SnapshotRequest.prototype.setVesselid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional VesselSnapshotRequest vessel = 2;
 * @return {?proto.VesselSnapshotRequest}
 */
proto.SnapshotRequest.prototype.getVessel = function() {
  return /** @type{?proto.VesselSnapshotRequest} */ (
    jspb.Message.getWrapperField(this, proto.VesselSnapshotRequest, 2));
};


/**
 * @param {?proto.VesselSnapshotRequest|undefined} value
 * @return {!proto.SnapshotRequest} returns this
*/
proto.SnapshotRequest.prototype.setVessel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SnapshotRequest} returns this
 */
proto.SnapshotRequest.prototype.clearVessel = function() {
  return this.setVessel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SnapshotRequest.prototype.hasVessel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FlightSnapshotRequest flight = 3;
 * @return {?proto.FlightSnapshotRequest}
 */
proto.SnapshotRequest.prototype.getFlight = function() {
  return /** @type{?proto.FlightSnapshotRequest} */ (
    jspb.Message.getWrapperField(this, proto.FlightSnapshotRequest, 3));
};


/**
 * @param {?proto.FlightSnapshotRequest|undefined} value
 * @return {!proto.SnapshotRequest} returns this
*/
proto.SnapshotRequest.prototype.setFlight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SnapshotRequest} returns this
 */
proto.SnapshotRequest.prototype.clearFlight = function() {
  return this.setFlight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SnapshotRequest.prototype.hasFlight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OrbitSnapshotRequest orbit = 4;
 * @return {?proto.OrbitSnapshotRequest}
 */
proto.SnapshotRequest.prototype.getOrbit = function() {
  return /** @type{?proto.OrbitSnapshotRequest} */ (
    jspb.Message.getWrapperField(this, proto.OrbitSnapshotRequest, 4));
};


/**
 * @param {?proto.OrbitSnapshotRequest|undefined} value
 * @return {!proto.SnapshotRequest} returns this
*/
proto.SnapshotRequest.prototype.setOrbit = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SnapshotRequest} returns this
 */
proto.SnapshotRequest.prototype.clearOrbit = function() {
  return this.setOrbit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SnapshotRequest.prototype.hasOrbit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated PartSnapshotRequest parts = 5;
 * @return {!Array<!proto.PartSnapshotRequest>}
 */
proto.SnapshotRequest.prototype.getPartsList = function() {
  return /** @type{!Array<!proto.PartSnapshotRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PartSnapshotRequest, 5));
};


/**
 * @param {!Array<!proto.PartSnapshotRequest>} value
 * @return {!proto.SnapshotRequest} returns this
*/
proto.SnapshotRequest.prototype.setPartsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.PartSnapshotRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PartSnapshotRequest}
 */
proto.SnapshotRequest.prototype.addParts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.PartSnapshotRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SnapshotRequest} returns this
 */
proto.SnapshotRequest.prototype.clearPartsList = function() {
  return this.setPartsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VesselResource.prototype.toObject = function(opt_includeInstance) {
  return proto.VesselResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VesselResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VesselResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    capacity: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    rate: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VesselResource}
 */
proto.VesselResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VesselResource;
  return proto.VesselResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VesselResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VesselResource}
 */
proto.VesselResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCapacity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VesselResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VesselResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VesselResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VesselResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCapacity();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRate();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.VesselResource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.VesselResource} returns this
 */
proto.VesselResource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double capacity = 2;
 * @return {number}
 */
proto.VesselResource.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VesselResource} returns this
 */
proto.VesselResource.prototype.setCapacity = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double amount = 3;
 * @return {number}
 */
proto.VesselResource.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VesselResource} returns this
 */
proto.VesselResource.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double rate = 4;
 * @return {number}
 */
proto.VesselResource.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VesselResource} returns this
 */
proto.VesselResource.prototype.setRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VesselSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.VesselSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VesselSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VesselSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    situation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    met: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    biome: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mass: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    stage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalresourcesMap: (f = msg.getTotalresourcesMap()) ? f.toObject(includeInstance, proto.VesselResource.toObject) : [],
    stageresourcesMap: (f = msg.getStageresourcesMap()) ? f.toObject(includeInstance, proto.VesselResource.toObject) : [],
    sasmode: jspb.Message.getFieldWithDefault(msg, 8, 0),
    orbitingbody: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mainthrottle: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    sasenabled: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    rcsenabled: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    gearenabled: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    lightenabled: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    brakesenabled: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VesselSnapshot}
 */
proto.VesselSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VesselSnapshot;
  return proto.VesselSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VesselSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VesselSnapshot}
 */
proto.VesselSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VesselSnapshot.VesselSituation} */ (reader.readEnum());
      msg.setSituation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMet(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiome(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMass(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 6:
      var value = msg.getTotalresourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.VesselResource.deserializeBinaryFromReader, "", new proto.VesselResource());
         });
      break;
    case 7:
      var value = msg.getStageresourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.VesselResource.deserializeBinaryFromReader, "", new proto.VesselResource());
         });
      break;
    case 8:
      var value = /** @type {!proto.VesselSnapshot.SASMode} */ (reader.readEnum());
      msg.setSasmode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrbitingbody(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMainthrottle(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSasenabled(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRcsenabled(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGearenabled(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLightenabled(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBrakesenabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VesselSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VesselSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VesselSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VesselSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSituation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMet();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getBiome();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMass();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTotalresourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.VesselResource.serializeBinaryToWriter);
  }
  f = message.getStageresourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.VesselResource.serializeBinaryToWriter);
  }
  f = message.getSasmode();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getOrbitingbody();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMainthrottle();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getSasenabled();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getRcsenabled();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getGearenabled();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getLightenabled();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getBrakesenabled();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VesselSnapshot.VesselSituation = {
  LANDED: 0,
  SPLASHED: 1,
  PRELAUNCH: 2,
  FLYING: 3,
  SUBORBITAL: 4,
  ORBITING: 5,
  ESCAPING: 6,
  DOCKED: 7
};

/**
 * @enum {number}
 */
proto.VesselSnapshot.SASMode = {
  STABILITYASSIST: 0,
  PROGRADE: 1,
  RETROGRADE: 2,
  NORMAL: 3,
  ANTINORMAL: 4,
  RADIALIN: 5,
  RADIALOUT: 6,
  TARGET: 7,
  ANTITARGET: 8,
  MANEUVER: 9
};

/**
 * optional VesselSituation situation = 1;
 * @return {!proto.VesselSnapshot.VesselSituation}
 */
proto.VesselSnapshot.prototype.getSituation = function() {
  return /** @type {!proto.VesselSnapshot.VesselSituation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.VesselSnapshot.VesselSituation} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setSituation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double MET = 2;
 * @return {number}
 */
proto.VesselSnapshot.prototype.getMet = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setMet = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string biome = 3;
 * @return {string}
 */
proto.VesselSnapshot.prototype.getBiome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setBiome = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double mass = 4;
 * @return {number}
 */
proto.VesselSnapshot.prototype.getMass = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setMass = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 stage = 5;
 * @return {number}
 */
proto.VesselSnapshot.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<string, VesselResource> totalResources = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.VesselResource>}
 */
proto.VesselSnapshot.prototype.getTotalresourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.VesselResource>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.VesselResource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.clearTotalresourcesMap = function() {
  this.getTotalresourcesMap().clear();
  return this;};


/**
 * map<string, VesselResource> stageResources = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.VesselResource>}
 */
proto.VesselSnapshot.prototype.getStageresourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.VesselResource>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.VesselResource));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.clearStageresourcesMap = function() {
  this.getStageresourcesMap().clear();
  return this;};


/**
 * optional SASMode SasMode = 8;
 * @return {!proto.VesselSnapshot.SASMode}
 */
proto.VesselSnapshot.prototype.getSasmode = function() {
  return /** @type {!proto.VesselSnapshot.SASMode} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.VesselSnapshot.SASMode} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setSasmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string orbitingBody = 9;
 * @return {string}
 */
proto.VesselSnapshot.prototype.getOrbitingbody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setOrbitingbody = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional double mainThrottle = 10;
 * @return {number}
 */
proto.VesselSnapshot.prototype.getMainthrottle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setMainthrottle = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional bool SASEnabled = 11;
 * @return {boolean}
 */
proto.VesselSnapshot.prototype.getSasenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setSasenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool RCSEnabled = 12;
 * @return {boolean}
 */
proto.VesselSnapshot.prototype.getRcsenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setRcsenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool GearEnabled = 13;
 * @return {boolean}
 */
proto.VesselSnapshot.prototype.getGearenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setGearenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool LightEnabled = 14;
 * @return {boolean}
 */
proto.VesselSnapshot.prototype.getLightenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setLightenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool BrakesEnabled = 15;
 * @return {boolean}
 */
proto.VesselSnapshot.prototype.getBrakesenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VesselSnapshot} returns this
 */
proto.VesselSnapshot.prototype.setBrakesenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vector3d.prototype.toObject = function(opt_includeInstance) {
  return proto.Vector3d.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vector3d} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector3d.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vector3d}
 */
proto.Vector3d.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vector3d;
  return proto.Vector3d.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vector3d} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vector3d}
 */
proto.Vector3d.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vector3d.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vector3d.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vector3d} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector3d.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.Vector3d.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3d} returns this
 */
proto.Vector3d.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.Vector3d.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3d} returns this
 */
proto.Vector3d.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.Vector3d.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3d} returns this
 */
proto.Vector3d.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QuaternionD.prototype.toObject = function(opt_includeInstance) {
  return proto.QuaternionD.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QuaternionD} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuaternionD.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    w: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QuaternionD}
 */
proto.QuaternionD.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QuaternionD;
  return proto.QuaternionD.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QuaternionD} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QuaternionD}
 */
proto.QuaternionD.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QuaternionD.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QuaternionD.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QuaternionD} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuaternionD.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getW();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.QuaternionD.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.QuaternionD} returns this
 */
proto.QuaternionD.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.QuaternionD.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.QuaternionD} returns this
 */
proto.QuaternionD.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.QuaternionD.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.QuaternionD} returns this
 */
proto.QuaternionD.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double w = 4;
 * @return {number}
 */
proto.QuaternionD.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.QuaternionD} returns this
 */
proto.QuaternionD.prototype.setW = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NavBallMarker.prototype.toObject = function(opt_includeInstance) {
  return proto.NavBallMarker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NavBallMarker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NavBallMarker.toObject = function(includeInstance, msg) {
  var f, obj = {
    yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NavBallMarker}
 */
proto.NavBallMarker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NavBallMarker;
  return proto.NavBallMarker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NavBallMarker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NavBallMarker}
 */
proto.NavBallMarker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYaw(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPitch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NavBallMarker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NavBallMarker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NavBallMarker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NavBallMarker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double yaw = 1;
 * @return {number}
 */
proto.NavBallMarker.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.NavBallMarker} returns this
 */
proto.NavBallMarker.prototype.setYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double pitch = 2;
 * @return {number}
 */
proto.NavBallMarker.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.NavBallMarker} returns this
 */
proto.NavBallMarker.prototype.setPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AttitudeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AttitudeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AttitudeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttitudeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.Vector3d.toObject(includeInstance, f),
    direction: (f = msg.getDirection()) && proto.Vector3d.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && proto.Vector3d.toObject(includeInstance, f),
    prograde: (f = msg.getPrograde()) && proto.Vector3d.toObject(includeInstance, f),
    normal: (f = msg.getNormal()) && proto.Vector3d.toObject(includeInstance, f),
    radialout: (f = msg.getRadialout()) && proto.Vector3d.toObject(includeInstance, f),
    up: (f = msg.getUp()) && proto.Vector3d.toObject(includeInstance, f),
    forward: (f = msg.getForward()) && proto.Vector3d.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.Vector3d.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && proto.QuaternionD.toObject(includeInstance, f),
    srfreferenceframerotation: (f = msg.getSrfreferenceframerotation()) && proto.QuaternionD.toObject(includeInstance, f),
    orbitprograde: (f = msg.getOrbitprograde()) && proto.NavBallMarker.toObject(includeInstance, f),
    orbitretrograde: (f = msg.getOrbitretrograde()) && proto.NavBallMarker.toObject(includeInstance, f),
    orbitnormal: (f = msg.getOrbitnormal()) && proto.NavBallMarker.toObject(includeInstance, f),
    orbitantinormal: (f = msg.getOrbitantinormal()) && proto.NavBallMarker.toObject(includeInstance, f),
    orbitradialin: (f = msg.getOrbitradialin()) && proto.NavBallMarker.toObject(includeInstance, f),
    orbitradialout: (f = msg.getOrbitradialout()) && proto.NavBallMarker.toObject(includeInstance, f),
    srfprograde: (f = msg.getSrfprograde()) && proto.NavBallMarker.toObject(includeInstance, f),
    srfretrograde: (f = msg.getSrfretrograde()) && proto.NavBallMarker.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.NavBallMarker.toObject(includeInstance, f),
    antitarget: (f = msg.getAntitarget()) && proto.NavBallMarker.toObject(includeInstance, f),
    targetrelvel: (f = msg.getTargetrelvel()) && proto.NavBallMarker.toObject(includeInstance, f),
    antitargetrelvel: (f = msg.getAntitargetrelvel()) && proto.NavBallMarker.toObject(includeInstance, f),
    maneuvernode: (f = msg.getManeuvernode()) && proto.NavBallMarker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AttitudeInfo}
 */
proto.AttitudeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AttitudeInfo;
  return proto.AttitudeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AttitudeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AttitudeInfo}
 */
proto.AttitudeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    case 3:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 4:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setPrograde(value);
      break;
    case 5:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setNormal(value);
      break;
    case 6:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setRadialout(value);
      break;
    case 7:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setUp(value);
      break;
    case 8:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setForward(value);
      break;
    case 9:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    case 10:
      var value = new proto.QuaternionD;
      reader.readMessage(value,proto.QuaternionD.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    case 11:
      var value = new proto.QuaternionD;
      reader.readMessage(value,proto.QuaternionD.deserializeBinaryFromReader);
      msg.setSrfreferenceframerotation(value);
      break;
    case 12:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setOrbitprograde(value);
      break;
    case 13:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setOrbitretrograde(value);
      break;
    case 14:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setOrbitnormal(value);
      break;
    case 15:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setOrbitantinormal(value);
      break;
    case 16:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setOrbitradialin(value);
      break;
    case 17:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setOrbitradialout(value);
      break;
    case 18:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setSrfprograde(value);
      break;
    case 19:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setSrfretrograde(value);
      break;
    case 20:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 21:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setAntitarget(value);
      break;
    case 22:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setTargetrelvel(value);
      break;
    case 23:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setAntitargetrelvel(value);
      break;
    case 24:
      var value = new proto.NavBallMarker;
      reader.readMessage(value,proto.NavBallMarker.deserializeBinaryFromReader);
      msg.setManeuvernode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AttitudeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AttitudeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AttitudeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttitudeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getPrograde();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getNormal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getRadialout();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getUp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getForward();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.QuaternionD.serializeBinaryToWriter
    );
  }
  f = message.getSrfreferenceframerotation();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.QuaternionD.serializeBinaryToWriter
    );
  }
  f = message.getOrbitprograde();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getOrbitretrograde();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getOrbitnormal();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getOrbitantinormal();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getOrbitradialin();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getOrbitradialout();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getSrfprograde();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getSrfretrograde();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getAntitarget();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getTargetrelvel();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getAntitargetrelvel();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
  f = message.getManeuvernode();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.NavBallMarker.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector3d position = 1;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getPosition = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 1));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vector3d direction = 2;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getDirection = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 2));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setDirection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vector3d velocity = 3;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getVelocity = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 3));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Vector3d prograde = 4;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getPrograde = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 4));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setPrograde = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearPrograde = function() {
  return this.setPrograde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasPrograde = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Vector3d normal = 5;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getNormal = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 5));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setNormal = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearNormal = function() {
  return this.setNormal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasNormal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Vector3d radialOut = 6;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getRadialout = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 6));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setRadialout = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearRadialout = function() {
  return this.setRadialout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasRadialout = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Vector3d up = 7;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getUp = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 7));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setUp = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearUp = function() {
  return this.setUp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasUp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Vector3d forward = 8;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getForward = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 8));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setForward = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearForward = function() {
  return this.setForward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasForward = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Vector3d right = 9;
 * @return {?proto.Vector3d}
 */
proto.AttitudeInfo.prototype.getRight = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 9));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasRight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional QuaternionD rotation = 10;
 * @return {?proto.QuaternionD}
 */
proto.AttitudeInfo.prototype.getRotation = function() {
  return /** @type{?proto.QuaternionD} */ (
    jspb.Message.getWrapperField(this, proto.QuaternionD, 10));
};


/**
 * @param {?proto.QuaternionD|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setRotation = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearRotation = function() {
  return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional QuaternionD srfReferenceFrameRotation = 11;
 * @return {?proto.QuaternionD}
 */
proto.AttitudeInfo.prototype.getSrfreferenceframerotation = function() {
  return /** @type{?proto.QuaternionD} */ (
    jspb.Message.getWrapperField(this, proto.QuaternionD, 11));
};


/**
 * @param {?proto.QuaternionD|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setSrfreferenceframerotation = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearSrfreferenceframerotation = function() {
  return this.setSrfreferenceframerotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasSrfreferenceframerotation = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional NavBallMarker orbitPrograde = 12;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getOrbitprograde = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 12));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setOrbitprograde = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearOrbitprograde = function() {
  return this.setOrbitprograde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasOrbitprograde = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional NavBallMarker orbitRetrograde = 13;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getOrbitretrograde = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 13));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setOrbitretrograde = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearOrbitretrograde = function() {
  return this.setOrbitretrograde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasOrbitretrograde = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional NavBallMarker orbitNormal = 14;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getOrbitnormal = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 14));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setOrbitnormal = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearOrbitnormal = function() {
  return this.setOrbitnormal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasOrbitnormal = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional NavBallMarker orbitAntinormal = 15;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getOrbitantinormal = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 15));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setOrbitantinormal = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearOrbitantinormal = function() {
  return this.setOrbitantinormal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasOrbitantinormal = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional NavBallMarker orbitRadialIn = 16;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getOrbitradialin = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 16));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setOrbitradialin = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearOrbitradialin = function() {
  return this.setOrbitradialin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasOrbitradialin = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional NavBallMarker orbitRadialOut = 17;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getOrbitradialout = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 17));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setOrbitradialout = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearOrbitradialout = function() {
  return this.setOrbitradialout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasOrbitradialout = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional NavBallMarker srfPrograde = 18;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getSrfprograde = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 18));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setSrfprograde = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearSrfprograde = function() {
  return this.setSrfprograde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasSrfprograde = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional NavBallMarker srfRetrograde = 19;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getSrfretrograde = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 19));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setSrfretrograde = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearSrfretrograde = function() {
  return this.setSrfretrograde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasSrfretrograde = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional NavBallMarker target = 20;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getTarget = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 20));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional NavBallMarker antiTarget = 21;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getAntitarget = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 21));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setAntitarget = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearAntitarget = function() {
  return this.setAntitarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasAntitarget = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional NavBallMarker targetRelVel = 22;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getTargetrelvel = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 22));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setTargetrelvel = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearTargetrelvel = function() {
  return this.setTargetrelvel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasTargetrelvel = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional NavBallMarker antiTargetRelVel = 23;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getAntitargetrelvel = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 23));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setAntitargetrelvel = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearAntitargetrelvel = function() {
  return this.setAntitargetrelvel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasAntitargetrelvel = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional NavBallMarker maneuverNode = 24;
 * @return {?proto.NavBallMarker}
 */
proto.AttitudeInfo.prototype.getManeuvernode = function() {
  return /** @type{?proto.NavBallMarker} */ (
    jspb.Message.getWrapperField(this, proto.NavBallMarker, 24));
};


/**
 * @param {?proto.NavBallMarker|undefined} value
 * @return {!proto.AttitudeInfo} returns this
*/
proto.AttitudeInfo.prototype.setManeuvernode = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AttitudeInfo} returns this
 */
proto.AttitudeInfo.prototype.clearManeuvernode = function() {
  return this.setManeuvernode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AttitudeInfo.prototype.hasManeuvernode = function() {
  return jspb.Message.getField(this, 24) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FlightSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.FlightSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FlightSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlightSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    vesselid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gforce: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    meanaltitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    surfacealtitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    bedrockaltitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    elevation: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    surfacespeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    horizontalspeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    verticalspeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    pitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    roll: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    atmospheredensity: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    dynamicpressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    staticpressureatmsl: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    staticpressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    speedofsound: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    mach: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    trueairspeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    angleofattack: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    totalairtemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0),
    staticairtemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0),
    orbitspeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 25, 0.0),
    missiontime: jspb.Message.getFloatingPointFieldWithDefault(msg, 26, 0.0),
    sideslipangle: jspb.Message.getFloatingPointFieldWithDefault(msg, 27, 0.0),
    surfacevelocityprograde: (f = msg.getSurfacevelocityprograde()) && proto.Vector3d.toObject(includeInstance, f),
    orbitalvelocityprograde: (f = msg.getOrbitalvelocityprograde()) && proto.Vector3d.toObject(includeInstance, f),
    navballangles: (f = msg.getNavballangles()) && proto.Vector3d.toObject(includeInstance, f),
    externaltemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 31, 0.0),
    twractual: jspb.Message.getFloatingPointFieldWithDefault(msg, 32, 0.0),
    twrmaxthrust: jspb.Message.getFloatingPointFieldWithDefault(msg, 33, 0.0),
    twrmaxthrustnolimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 34, 0.0),
    dragforce: jspb.Message.getFloatingPointFieldWithDefault(msg, 35, 0.0),
    liftforce: jspb.Message.getFloatingPointFieldWithDefault(msg, 36, 0.0),
    terminalvelocity: jspb.Message.getFloatingPointFieldWithDefault(msg, 37, 0.0),
    liftupforce: jspb.Message.getFloatingPointFieldWithDefault(msg, 38, 0.0),
    attitudeinfo: (f = msg.getAttitudeinfo()) && proto.AttitudeInfo.toObject(includeInstance, f),
    ut: jspb.Message.getFloatingPointFieldWithDefault(msg, 40, 0.0),
    navmode: jspb.Message.getFieldWithDefault(msg, 41, ""),
    stallfraction: jspb.Message.getFloatingPointFieldWithDefault(msg, 42, 0.0),
    dragcoefficient: jspb.Message.getFloatingPointFieldWithDefault(msg, 43, 0.0),
    liftcoefficient: jspb.Message.getFloatingPointFieldWithDefault(msg, 44, 0.0),
    ballisticcoefficient: jspb.Message.getFloatingPointFieldWithDefault(msg, 45, 0.0),
    tsfc: jspb.Message.getFloatingPointFieldWithDefault(msg, 46, 0.0),
    reynoldsnumber: jspb.Message.getFloatingPointFieldWithDefault(msg, 47, 0.0),
    twrdata: (f = msg.getTwrdata()) && proto.Vector3d.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FlightSnapshot}
 */
proto.FlightSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FlightSnapshot;
  return proto.FlightSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FlightSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FlightSnapshot}
 */
proto.FlightSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVesselid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGforce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeanaltitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSurfacealtitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBedrockaltitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setElevation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSurfacespeed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHorizontalspeed(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVerticalspeed(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPitch(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYaw(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoll(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAtmospheredensity(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDynamicpressure(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStaticpressureatmsl(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStaticpressure(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedofsound(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMach(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrueairspeed(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAngleofattack(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalairtemperature(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStaticairtemperature(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOrbitspeed(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMissiontime(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSideslipangle(value);
      break;
    case 28:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setSurfacevelocityprograde(value);
      break;
    case 29:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setOrbitalvelocityprograde(value);
      break;
    case 30:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setNavballangles(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExternaltemperature(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTwractual(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTwrmaxthrust(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTwrmaxthrustnolimit(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDragforce(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLiftforce(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTerminalvelocity(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLiftupforce(value);
      break;
    case 39:
      var value = new proto.AttitudeInfo;
      reader.readMessage(value,proto.AttitudeInfo.deserializeBinaryFromReader);
      msg.setAttitudeinfo(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUt(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setNavmode(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStallfraction(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDragcoefficient(value);
      break;
    case 44:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLiftcoefficient(value);
      break;
    case 45:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBallisticcoefficient(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTsfc(value);
      break;
    case 47:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReynoldsnumber(value);
      break;
    case 48:
      var value = new proto.Vector3d;
      reader.readMessage(value,proto.Vector3d.deserializeBinaryFromReader);
      msg.setTwrdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FlightSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FlightSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FlightSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlightSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVesselid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGforce();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMeanaltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getSurfacealtitude();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getBedrockaltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSurfacespeed();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getHorizontalspeed();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getVerticalspeed();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getRoll();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getAtmospheredensity();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getDynamicpressure();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getStaticpressureatmsl();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getStaticpressure();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getSpeedofsound();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getMach();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getTrueairspeed();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getAngleofattack();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getTotalairtemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = message.getStaticairtemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = message.getOrbitspeed();
  if (f !== 0.0) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = message.getMissiontime();
  if (f !== 0.0) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = message.getSideslipangle();
  if (f !== 0.0) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = message.getSurfacevelocityprograde();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getOrbitalvelocityprograde();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getNavballangles();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
  f = message.getExternaltemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getTwractual();
  if (f !== 0.0) {
    writer.writeDouble(
      32,
      f
    );
  }
  f = message.getTwrmaxthrust();
  if (f !== 0.0) {
    writer.writeDouble(
      33,
      f
    );
  }
  f = message.getTwrmaxthrustnolimit();
  if (f !== 0.0) {
    writer.writeDouble(
      34,
      f
    );
  }
  f = message.getDragforce();
  if (f !== 0.0) {
    writer.writeDouble(
      35,
      f
    );
  }
  f = message.getLiftforce();
  if (f !== 0.0) {
    writer.writeDouble(
      36,
      f
    );
  }
  f = message.getTerminalvelocity();
  if (f !== 0.0) {
    writer.writeDouble(
      37,
      f
    );
  }
  f = message.getLiftupforce();
  if (f !== 0.0) {
    writer.writeDouble(
      38,
      f
    );
  }
  f = message.getAttitudeinfo();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.AttitudeInfo.serializeBinaryToWriter
    );
  }
  f = message.getUt();
  if (f !== 0.0) {
    writer.writeDouble(
      40,
      f
    );
  }
  f = message.getNavmode();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getStallfraction();
  if (f !== 0.0) {
    writer.writeDouble(
      42,
      f
    );
  }
  f = message.getDragcoefficient();
  if (f !== 0.0) {
    writer.writeDouble(
      43,
      f
    );
  }
  f = message.getLiftcoefficient();
  if (f !== 0.0) {
    writer.writeDouble(
      44,
      f
    );
  }
  f = message.getBallisticcoefficient();
  if (f !== 0.0) {
    writer.writeDouble(
      45,
      f
    );
  }
  f = message.getTsfc();
  if (f !== 0.0) {
    writer.writeDouble(
      46,
      f
    );
  }
  f = message.getReynoldsnumber();
  if (f !== 0.0) {
    writer.writeDouble(
      47,
      f
    );
  }
  f = message.getTwrdata();
  if (f != null) {
    writer.writeMessage(
      48,
      f,
      proto.Vector3d.serializeBinaryToWriter
    );
  }
};


/**
 * optional string vesselId = 1;
 * @return {string}
 */
proto.FlightSnapshot.prototype.getVesselid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setVesselid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double gForce = 2;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getGforce = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setGforce = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double meanAltitude = 3;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getMeanaltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setMeanaltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double surfaceAltitude = 4;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getSurfacealtitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setSurfacealtitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double bedrockAltitude = 5;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getBedrockaltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setBedrockaltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double elevation = 6;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getElevation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setElevation = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double latitude = 7;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double longitude = 8;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double surfaceSpeed = 9;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getSurfacespeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setSurfacespeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double horizontalSpeed = 10;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getHorizontalspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setHorizontalspeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double verticalSpeed = 11;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getVerticalspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setVerticalspeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double pitch = 12;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double yaw = 13;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double roll = 14;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setRoll = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double atmosphereDensity = 15;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getAtmospheredensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setAtmospheredensity = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double dynamicPressure = 16;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getDynamicpressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setDynamicpressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double staticPressureAtMSL = 17;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getStaticpressureatmsl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setStaticpressureatmsl = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double staticPressure = 18;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getStaticpressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setStaticpressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double speedOfSound = 19;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getSpeedofsound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setSpeedofsound = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double mach = 20;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getMach = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setMach = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double trueAirSpeed = 21;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getTrueairspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setTrueairspeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional double angleOfAttack = 22;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getAngleofattack = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setAngleofattack = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double totalAirTemperature = 23;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getTotalairtemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setTotalairtemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional double staticAirTemperature = 24;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getStaticairtemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setStaticairtemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional double orbitSpeed = 25;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getOrbitspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setOrbitspeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 25, value);
};


/**
 * optional double missionTime = 26;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getMissiontime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setMissiontime = function(value) {
  return jspb.Message.setProto3FloatField(this, 26, value);
};


/**
 * optional double sideslipAngle = 27;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getSideslipangle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setSideslipangle = function(value) {
  return jspb.Message.setProto3FloatField(this, 27, value);
};


/**
 * optional Vector3d surfaceVelocityPrograde = 28;
 * @return {?proto.Vector3d}
 */
proto.FlightSnapshot.prototype.getSurfacevelocityprograde = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 28));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.FlightSnapshot} returns this
*/
proto.FlightSnapshot.prototype.setSurfacevelocityprograde = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.clearSurfacevelocityprograde = function() {
  return this.setSurfacevelocityprograde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FlightSnapshot.prototype.hasSurfacevelocityprograde = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional Vector3d orbitalVelocityPrograde = 29;
 * @return {?proto.Vector3d}
 */
proto.FlightSnapshot.prototype.getOrbitalvelocityprograde = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 29));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.FlightSnapshot} returns this
*/
proto.FlightSnapshot.prototype.setOrbitalvelocityprograde = function(value) {
  return jspb.Message.setWrapperField(this, 29, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.clearOrbitalvelocityprograde = function() {
  return this.setOrbitalvelocityprograde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FlightSnapshot.prototype.hasOrbitalvelocityprograde = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional Vector3d navBallAngles = 30;
 * @return {?proto.Vector3d}
 */
proto.FlightSnapshot.prototype.getNavballangles = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 30));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.FlightSnapshot} returns this
*/
proto.FlightSnapshot.prototype.setNavballangles = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.clearNavballangles = function() {
  return this.setNavballangles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FlightSnapshot.prototype.hasNavballangles = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional double externalTemperature = 31;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getExternaltemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setExternaltemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 31, value);
};


/**
 * optional double TWRActual = 32;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getTwractual = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setTwractual = function(value) {
  return jspb.Message.setProto3FloatField(this, 32, value);
};


/**
 * optional double TWRMaxThrust = 33;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getTwrmaxthrust = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 33, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setTwrmaxthrust = function(value) {
  return jspb.Message.setProto3FloatField(this, 33, value);
};


/**
 * optional double TWRMaxThrustNoLimit = 34;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getTwrmaxthrustnolimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 34, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setTwrmaxthrustnolimit = function(value) {
  return jspb.Message.setProto3FloatField(this, 34, value);
};


/**
 * optional double dragForce = 35;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getDragforce = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 35, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setDragforce = function(value) {
  return jspb.Message.setProto3FloatField(this, 35, value);
};


/**
 * optional double liftForce = 36;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getLiftforce = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 36, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setLiftforce = function(value) {
  return jspb.Message.setProto3FloatField(this, 36, value);
};


/**
 * optional double terminalVelocity = 37;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getTerminalvelocity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 37, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setTerminalvelocity = function(value) {
  return jspb.Message.setProto3FloatField(this, 37, value);
};


/**
 * optional double liftUpForce = 38;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getLiftupforce = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 38, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setLiftupforce = function(value) {
  return jspb.Message.setProto3FloatField(this, 38, value);
};


/**
 * optional AttitudeInfo attitudeInfo = 39;
 * @return {?proto.AttitudeInfo}
 */
proto.FlightSnapshot.prototype.getAttitudeinfo = function() {
  return /** @type{?proto.AttitudeInfo} */ (
    jspb.Message.getWrapperField(this, proto.AttitudeInfo, 39));
};


/**
 * @param {?proto.AttitudeInfo|undefined} value
 * @return {!proto.FlightSnapshot} returns this
*/
proto.FlightSnapshot.prototype.setAttitudeinfo = function(value) {
  return jspb.Message.setWrapperField(this, 39, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.clearAttitudeinfo = function() {
  return this.setAttitudeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FlightSnapshot.prototype.hasAttitudeinfo = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional double ut = 40;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getUt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 40, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setUt = function(value) {
  return jspb.Message.setProto3FloatField(this, 40, value);
};


/**
 * optional string navMode = 41;
 * @return {string}
 */
proto.FlightSnapshot.prototype.getNavmode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/**
 * @param {string} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setNavmode = function(value) {
  return jspb.Message.setProto3StringField(this, 41, value);
};


/**
 * optional double stallFraction = 42;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getStallfraction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 42, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setStallfraction = function(value) {
  return jspb.Message.setProto3FloatField(this, 42, value);
};


/**
 * optional double dragCoefficient = 43;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getDragcoefficient = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 43, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setDragcoefficient = function(value) {
  return jspb.Message.setProto3FloatField(this, 43, value);
};


/**
 * optional double liftCoefficient = 44;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getLiftcoefficient = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 44, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setLiftcoefficient = function(value) {
  return jspb.Message.setProto3FloatField(this, 44, value);
};


/**
 * optional double ballisticCoefficient = 45;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getBallisticcoefficient = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 45, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setBallisticcoefficient = function(value) {
  return jspb.Message.setProto3FloatField(this, 45, value);
};


/**
 * optional double TSFC = 46;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getTsfc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 46, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setTsfc = function(value) {
  return jspb.Message.setProto3FloatField(this, 46, value);
};


/**
 * optional double reynoldsNumber = 47;
 * @return {number}
 */
proto.FlightSnapshot.prototype.getReynoldsnumber = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 47, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.setReynoldsnumber = function(value) {
  return jspb.Message.setProto3FloatField(this, 47, value);
};


/**
 * optional Vector3d TWRData = 48;
 * @return {?proto.Vector3d}
 */
proto.FlightSnapshot.prototype.getTwrdata = function() {
  return /** @type{?proto.Vector3d} */ (
    jspb.Message.getWrapperField(this, proto.Vector3d, 48));
};


/**
 * @param {?proto.Vector3d|undefined} value
 * @return {!proto.FlightSnapshot} returns this
*/
proto.FlightSnapshot.prototype.setTwrdata = function(value) {
  return jspb.Message.setWrapperField(this, 48, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FlightSnapshot} returns this
 */
proto.FlightSnapshot.prototype.clearTwrdata = function() {
  return this.setTwrdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FlightSnapshot.prototype.hasTwrdata = function() {
  return jspb.Message.getField(this, 48) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrbitSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.OrbitSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrbitSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrbitSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    bodyname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apoapsis: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    periapsis: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    apoapsisaltitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    periapsisaltitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    semimajoraxis: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    semiminoraxis: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    period: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    timetoapoapsis: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    timetoperiapsis: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    eccentricity: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    inclination: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    longitudeofascendingnode: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    argumentofperiapsis: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    meananomalyatepoch: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    epoch: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    meananomaly: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    eccentricanomaly: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    trueanomaly: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    timetosoichange: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    orbitalspeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrbitSnapshot}
 */
proto.OrbitSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrbitSnapshot;
  return proto.OrbitSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrbitSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrbitSnapshot}
 */
proto.OrbitSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodyname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setApoapsis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPeriapsis(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setApoapsisaltitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPeriapsisaltitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSemimajoraxis(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSemiminoraxis(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPeriod(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimetoapoapsis(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimetoperiapsis(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEccentricity(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInclination(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeofascendingnode(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setArgumentofperiapsis(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeananomalyatepoch(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEpoch(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeananomaly(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEccentricanomaly(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrueanomaly(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimetosoichange(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOrbitalspeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrbitSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrbitSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrbitSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrbitSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBodyname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApoapsis();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPeriapsis();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getApoapsisaltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPeriapsisaltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getSemimajoraxis();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getSemiminoraxis();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getTimetoapoapsis();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getTimetoperiapsis();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getEccentricity();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getInclination();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getLongitudeofascendingnode();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getArgumentofperiapsis();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getMeananomalyatepoch();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getMeananomaly();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getEccentricanomaly();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getTrueanomaly();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getTimetosoichange();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getOrbitalspeed();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
};


/**
 * optional string bodyName = 1;
 * @return {string}
 */
proto.OrbitSnapshot.prototype.getBodyname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setBodyname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double apoapsis = 2;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getApoapsis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setApoapsis = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double periapsis = 3;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getPeriapsis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setPeriapsis = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double apoapsisAltitude = 4;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getApoapsisaltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setApoapsisaltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double periapsisAltitude = 5;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getPeriapsisaltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setPeriapsisaltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double semiMajorAxis = 6;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getSemimajoraxis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setSemimajoraxis = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double semiMinorAxis = 7;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getSemiminoraxis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setSemiminoraxis = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double radius = 8;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double speed = 9;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double period = 10;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double timeToApoapsis = 11;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getTimetoapoapsis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setTimetoapoapsis = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double timeToPeriapsis = 12;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getTimetoperiapsis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setTimetoperiapsis = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double eccentricity = 13;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getEccentricity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setEccentricity = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double inclination = 14;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getInclination = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setInclination = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double longitudeOfAscendingNode = 15;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getLongitudeofascendingnode = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setLongitudeofascendingnode = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double argumentOfPeriapsis = 16;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getArgumentofperiapsis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setArgumentofperiapsis = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double meanAnomalyAtEpoch = 17;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getMeananomalyatepoch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setMeananomalyatepoch = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double epoch = 18;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double meanAnomaly = 19;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getMeananomaly = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setMeananomaly = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double eccentricAnomaly = 20;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getEccentricanomaly = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setEccentricanomaly = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double trueAnomaly = 21;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getTrueanomaly = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setTrueanomaly = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional double timeToSOIChange = 22;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getTimetosoichange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setTimetosoichange = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double orbitalSpeed = 23;
 * @return {number}
 */
proto.OrbitSnapshot.prototype.getOrbitalspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OrbitSnapshot} returns this
 */
proto.OrbitSnapshot.prototype.setOrbitalspeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WheelSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.WheelSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WheelSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WheelSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    grounded: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    deployed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    powered: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    motorenabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    motorstate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    motoroutput: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    inverted: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    tractioncontrolenabled: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    tractioncontrol: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    drivelimiter: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    autofrictioncontrolenabled: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    manualfrictioncontrol: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    steeringenabled: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    steeringinverted: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    broken: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    stress: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    stresspercentage: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    deflection: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    slip: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WheelSnapshot}
 */
proto.WheelSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WheelSnapshot;
  return proto.WheelSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WheelSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WheelSnapshot}
 */
proto.WheelSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WheelSnapshot.WheelState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGrounded(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployed(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPowered(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMotorenabled(value);
      break;
    case 6:
      var value = /** @type {!proto.WheelSnapshot.MotorState} */ (reader.readEnum());
      msg.setMotorstate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMotoroutput(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInverted(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTractioncontrolenabled(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTractioncontrol(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDrivelimiter(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutofrictioncontrolenabled(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setManualfrictioncontrol(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSteeringenabled(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSteeringinverted(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBroken(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStress(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStresspercentage(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeflection(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSlip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WheelSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WheelSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WheelSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WheelSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGrounded();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDeployed();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPowered();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMotorenabled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMotorstate();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMotoroutput();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getInverted();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getTractioncontrolenabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getTractioncontrol();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getDrivelimiter();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getAutofrictioncontrolenabled();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getManualfrictioncontrol();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getSteeringenabled();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getSteeringinverted();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getBroken();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getStress();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getStresspercentage();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getDeflection();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getSlip();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.WheelSnapshot.WheelType = {
  FREE: 0,
  MOTORIZED: 1,
  LEG: 2
};

/**
 * @enum {number}
 */
proto.WheelSnapshot.WheelState = {
  RETRACTED: 0,
  DEPLOYED: 1,
  RETRACTING: 2,
  DEPLOYING: 3,
  BROKEN: 4
};

/**
 * @enum {number}
 */
proto.WheelSnapshot.MotorState = {
  INOPERABLE: 0,
  NOTENOUGHRESOURCES: 11,
  DISABLED: 2,
  IDLE: 3,
  RUNNING: 4
};

/**
 * optional WheelState state = 1;
 * @return {!proto.WheelSnapshot.WheelState}
 */
proto.WheelSnapshot.prototype.getState = function() {
  return /** @type {!proto.WheelSnapshot.WheelState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.WheelSnapshot.WheelState} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool grounded = 2;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getGrounded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setGrounded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool deployed = 3;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getDeployed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setDeployed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool powered = 4;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getPowered = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setPowered = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool motorEnabled = 5;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getMotorenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setMotorenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional MotorState motorState = 6;
 * @return {!proto.WheelSnapshot.MotorState}
 */
proto.WheelSnapshot.prototype.getMotorstate = function() {
  return /** @type {!proto.WheelSnapshot.MotorState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.WheelSnapshot.MotorState} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setMotorstate = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional double motorOutput = 7;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getMotoroutput = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setMotoroutput = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool inverted = 8;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getInverted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setInverted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool tractionControlEnabled = 9;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getTractioncontrolenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setTractioncontrolenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional double tractionControl = 10;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getTractioncontrol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setTractioncontrol = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double driveLimiter = 11;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getDrivelimiter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setDrivelimiter = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional bool autoFrictionControlEnabled = 12;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getAutofrictioncontrolenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setAutofrictioncontrolenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional double manualFrictionControl = 13;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getManualfrictioncontrol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setManualfrictioncontrol = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional bool steeringEnabled = 14;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getSteeringenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setSteeringenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool steeringInverted = 15;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getSteeringinverted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setSteeringinverted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool broken = 16;
 * @return {boolean}
 */
proto.WheelSnapshot.prototype.getBroken = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setBroken = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional double stress = 17;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getStress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setStress = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double stressPercentage = 18;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getStresspercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setStresspercentage = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double deflection = 19;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getDeflection = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setDeflection = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double slip = 20;
 * @return {number}
 */
proto.WheelSnapshot.prototype.getSlip = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.WheelSnapshot} returns this
 */
proto.WheelSnapshot.prototype.setSlip = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SolarPanelSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.SolarPanelSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SolarPanelSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SolarPanelSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deployed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    energyflow: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    sunexposure: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SolarPanelSnapshot}
 */
proto.SolarPanelSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SolarPanelSnapshot;
  return proto.SolarPanelSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SolarPanelSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SolarPanelSnapshot}
 */
proto.SolarPanelSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SolarPanelSnapshot.SolarPanelState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEnergyflow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSunexposure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SolarPanelSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SolarPanelSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SolarPanelSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SolarPanelSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeployed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEnergyflow();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getSunexposure();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SolarPanelSnapshot.SolarPanelState = {
  RETRACTED: 0,
  EXTENDED: 1,
  RETRACTING: 2,
  EXTENDING: 3,
  BROKEN: 4
};

/**
 * optional SolarPanelState state = 1;
 * @return {!proto.SolarPanelSnapshot.SolarPanelState}
 */
proto.SolarPanelSnapshot.prototype.getState = function() {
  return /** @type {!proto.SolarPanelSnapshot.SolarPanelState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SolarPanelSnapshot.SolarPanelState} value
 * @return {!proto.SolarPanelSnapshot} returns this
 */
proto.SolarPanelSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool deployed = 2;
 * @return {boolean}
 */
proto.SolarPanelSnapshot.prototype.getDeployed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SolarPanelSnapshot} returns this
 */
proto.SolarPanelSnapshot.prototype.setDeployed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional double energyFlow = 3;
 * @return {number}
 */
proto.SolarPanelSnapshot.prototype.getEnergyflow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SolarPanelSnapshot} returns this
 */
proto.SolarPanelSnapshot.prototype.setEnergyflow = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double sunExposure = 4;
 * @return {number}
 */
proto.SolarPanelSnapshot.prototype.getSunexposure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SolarPanelSnapshot} returns this
 */
proto.SolarPanelSnapshot.prototype.setSunexposure = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SensorSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.SensorSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SensorSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SensorSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    activated: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    reading: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SensorSnapshot}
 */
proto.SensorSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SensorSnapshot;
  return proto.SensorSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SensorSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SensorSnapshot}
 */
proto.SensorSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActivated(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SensorSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SensorSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SensorSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SensorSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getReading();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool activated = 1;
 * @return {boolean}
 */
proto.SensorSnapshot.prototype.getActivated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SensorSnapshot} returns this
 */
proto.SensorSnapshot.prototype.setActivated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string reading = 2;
 * @return {string}
 */
proto.SensorSnapshot.prototype.getReading = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SensorSnapshot} returns this
 */
proto.SensorSnapshot.prototype.setReading = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResourceHarvesterSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.ResourceHarvesterSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResourceHarvesterSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResourceHarvesterSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deployed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    activated: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    extractionrate: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    thermalefficiency: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    coretemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResourceHarvesterSnapshot}
 */
proto.ResourceHarvesterSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResourceHarvesterSnapshot;
  return proto.ResourceHarvesterSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResourceHarvesterSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResourceHarvesterSnapshot}
 */
proto.ResourceHarvesterSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResourceHarvesterSnapshot.ResourceHarvesterState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployed(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActivated(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExtractionrate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThermalefficiency(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCoretemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResourceHarvesterSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResourceHarvesterSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResourceHarvesterSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResourceHarvesterSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeployed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getActivated();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getExtractionrate();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getThermalefficiency();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCoretemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ResourceHarvesterSnapshot.ResourceHarvesterState = {
  RETRACTED: 0,
  DEPLOYED: 1,
  RETRACTING: 2,
  DEPLOYING: 3,
  ACTIVE: 4
};

/**
 * optional ResourceHarvesterState state = 1;
 * @return {!proto.ResourceHarvesterSnapshot.ResourceHarvesterState}
 */
proto.ResourceHarvesterSnapshot.prototype.getState = function() {
  return /** @type {!proto.ResourceHarvesterSnapshot.ResourceHarvesterState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ResourceHarvesterSnapshot.ResourceHarvesterState} value
 * @return {!proto.ResourceHarvesterSnapshot} returns this
 */
proto.ResourceHarvesterSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool deployed = 2;
 * @return {boolean}
 */
proto.ResourceHarvesterSnapshot.prototype.getDeployed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ResourceHarvesterSnapshot} returns this
 */
proto.ResourceHarvesterSnapshot.prototype.setDeployed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool activated = 3;
 * @return {boolean}
 */
proto.ResourceHarvesterSnapshot.prototype.getActivated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ResourceHarvesterSnapshot} returns this
 */
proto.ResourceHarvesterSnapshot.prototype.setActivated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional double extractionRate = 4;
 * @return {number}
 */
proto.ResourceHarvesterSnapshot.prototype.getExtractionrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ResourceHarvesterSnapshot} returns this
 */
proto.ResourceHarvesterSnapshot.prototype.setExtractionrate = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double thermalEfficiency = 5;
 * @return {number}
 */
proto.ResourceHarvesterSnapshot.prototype.getThermalefficiency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ResourceHarvesterSnapshot} returns this
 */
proto.ResourceHarvesterSnapshot.prototype.setThermalefficiency = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double coreTemperature = 6;
 * @return {number}
 */
proto.ResourceHarvesterSnapshot.prototype.getCoretemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ResourceHarvesterSnapshot} returns this
 */
proto.ResourceHarvesterSnapshot.prototype.setCoretemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConverterSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.ConverterSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConverterSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConverterSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    thermalefficiency: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    coretemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    status: jspb.Message.getFieldWithDefault(msg, 6, ""),
    overheating: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConverterSnapshot}
 */
proto.ConverterSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConverterSnapshot;
  return proto.ConverterSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConverterSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConverterSnapshot}
 */
proto.ConverterSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.ConverterSnapshot.ResourceConverterState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThermalefficiency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCoretemperature(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverheating(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConverterSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConverterSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConverterSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConverterSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getThermalefficiency();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getCoretemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOverheating();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ConverterSnapshot.ResourceConverterState = {
  UNKNOWN: 0,
  RUNNING: 1,
  IDLE: 2,
  MISSINGRESOURCE: 3,
  STORAGEFULL: 4,
  CAPACITY: 5
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.ConverterSnapshot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConverterSnapshot} returns this
 */
proto.ConverterSnapshot.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResourceConverterState state = 2;
 * @return {!proto.ConverterSnapshot.ResourceConverterState}
 */
proto.ConverterSnapshot.prototype.getState = function() {
  return /** @type {!proto.ConverterSnapshot.ResourceConverterState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ConverterSnapshot.ResourceConverterState} value
 * @return {!proto.ConverterSnapshot} returns this
 */
proto.ConverterSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double thermalEfficiency = 3;
 * @return {number}
 */
proto.ConverterSnapshot.prototype.getThermalefficiency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ConverterSnapshot} returns this
 */
proto.ConverterSnapshot.prototype.setThermalefficiency = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double coreTemperature = 4;
 * @return {number}
 */
proto.ConverterSnapshot.prototype.getCoretemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ConverterSnapshot} returns this
 */
proto.ConverterSnapshot.prototype.setCoretemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool active = 5;
 * @return {boolean}
 */
proto.ConverterSnapshot.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConverterSnapshot} returns this
 */
proto.ConverterSnapshot.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string status = 6;
 * @return {string}
 */
proto.ConverterSnapshot.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConverterSnapshot} returns this
 */
proto.ConverterSnapshot.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool overHeating = 7;
 * @return {boolean}
 */
proto.ConverterSnapshot.prototype.getOverheating = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConverterSnapshot} returns this
 */
proto.ConverterSnapshot.prototype.setOverheating = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResourceConverterSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.ResourceConverterSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResourceConverterSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResourceConverterSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    convertersMap: (f = msg.getConvertersMap()) ? f.toObject(includeInstance, proto.ConverterSnapshot.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResourceConverterSnapshot}
 */
proto.ResourceConverterSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResourceConverterSnapshot;
  return proto.ResourceConverterSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResourceConverterSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResourceConverterSnapshot}
 */
proto.ResourceConverterSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getConvertersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ConverterSnapshot.deserializeBinaryFromReader, "", new proto.ConverterSnapshot());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResourceConverterSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResourceConverterSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResourceConverterSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResourceConverterSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConvertersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ConverterSnapshot.serializeBinaryToWriter);
  }
};


/**
 * map<string, ConverterSnapshot> converters = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ConverterSnapshot>}
 */
proto.ResourceConverterSnapshot.prototype.getConvertersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ConverterSnapshot>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.ConverterSnapshot));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ResourceConverterSnapshot} returns this
 */
proto.ResourceConverterSnapshot.prototype.clearConvertersMap = function() {
  this.getConvertersMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReactionWheelSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.ReactionWheelSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReactionWheelSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReactionWheelSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReactionWheelSnapshot}
 */
proto.ReactionWheelSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReactionWheelSnapshot;
  return proto.ReactionWheelSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReactionWheelSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReactionWheelSnapshot}
 */
proto.ReactionWheelSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ReactionWheelSnapshot.ReactionWheelState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReactionWheelSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReactionWheelSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReactionWheelSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReactionWheelSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ReactionWheelSnapshot.ReactionWheelState = {
  ACTIVE: 0,
  DISABLED: 1,
  BROKEN: 2
};

/**
 * optional ReactionWheelState state = 1;
 * @return {!proto.ReactionWheelSnapshot.ReactionWheelState}
 */
proto.ReactionWheelSnapshot.prototype.getState = function() {
  return /** @type {!proto.ReactionWheelSnapshot.ReactionWheelState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ReactionWheelSnapshot.ReactionWheelState} value
 * @return {!proto.ReactionWheelSnapshot} returns this
 */
proto.ReactionWheelSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RCSSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.RCSSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RCSSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RCSSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    thrustlimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pitchenabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    yawenabled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    rollenabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    upenabled: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    forwardenabled: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    rightenabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    hasfuel: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    propellantinfoMap: (f = msg.getPropellantinfoMap()) ? f.toObject(includeInstance, proto.Propellant.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RCSSnapshot}
 */
proto.RCSSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RCSSnapshot;
  return proto.RCSSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RCSSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RCSSnapshot}
 */
proto.RCSSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrustlimit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPitchenabled(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setYawenabled(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRollenabled(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpenabled(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForwardenabled(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRightenabled(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasfuel(value);
      break;
    case 10:
      var value = msg.getPropellantinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Propellant.deserializeBinaryFromReader, "", new proto.Propellant());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RCSSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RCSSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RCSSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RCSSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getThrustlimit();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPitchenabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getYawenabled();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRollenabled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUpenabled();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getForwardenabled();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getRightenabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHasfuel();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getPropellantinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Propellant.serializeBinaryToWriter);
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional double thrustLimit = 2;
 * @return {number}
 */
proto.RCSSnapshot.prototype.getThrustlimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setThrustlimit = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool pitchEnabled = 3;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getPitchenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setPitchenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool yawEnabled = 4;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getYawenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setYawenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool rollEnabled = 5;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getRollenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setRollenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool upEnabled = 6;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getUpenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setUpenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool forwardEnabled = 7;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getForwardenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setForwardenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool rightEnabled = 8;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getRightenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setRightenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool hasFuel = 9;
 * @return {boolean}
 */
proto.RCSSnapshot.prototype.getHasfuel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.setHasfuel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * map<string, Propellant> propellantInfo = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Propellant>}
 */
proto.RCSSnapshot.prototype.getPropellantinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Propellant>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.Propellant));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.RCSSnapshot} returns this
 */
proto.RCSSnapshot.prototype.clearPropellantinfoMap = function() {
  this.getPropellantinfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RadiatorSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.RadiatorSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RadiatorSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadiatorSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deployed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    cooling: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RadiatorSnapshot}
 */
proto.RadiatorSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RadiatorSnapshot;
  return proto.RadiatorSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RadiatorSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RadiatorSnapshot}
 */
proto.RadiatorSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.RadiatorSnapshot.RadiatorState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployed(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCooling(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RadiatorSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RadiatorSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RadiatorSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadiatorSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeployed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCooling();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.RadiatorSnapshot.RadiatorState = {
  RETRACTED: 0,
  EXTENDED: 1,
  RETRACTING: 2,
  EXTENDING: 3,
  BROKEN: 4
};

/**
 * optional RadiatorState state = 1;
 * @return {!proto.RadiatorSnapshot.RadiatorState}
 */
proto.RadiatorSnapshot.prototype.getState = function() {
  return /** @type {!proto.RadiatorSnapshot.RadiatorState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.RadiatorSnapshot.RadiatorState} value
 * @return {!proto.RadiatorSnapshot} returns this
 */
proto.RadiatorSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool deployed = 2;
 * @return {boolean}
 */
proto.RadiatorSnapshot.prototype.getDeployed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RadiatorSnapshot} returns this
 */
proto.RadiatorSnapshot.prototype.setDeployed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool cooling = 3;
 * @return {boolean}
 */
proto.RadiatorSnapshot.prototype.getCooling = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RadiatorSnapshot} returns this
 */
proto.RadiatorSnapshot.prototype.setCooling = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParachuteSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.ParachuteSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParachuteSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ParachuteSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deployed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    deployaltitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    deployminpressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    deploymentsafestate: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParachuteSnapshot}
 */
proto.ParachuteSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParachuteSnapshot;
  return proto.ParachuteSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParachuteSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParachuteSnapshot}
 */
proto.ParachuteSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ParachuteSnapshot.ParachuteState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeployaltitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeployminpressure(value);
      break;
    case 5:
      var value = /** @type {!proto.ParachuteSnapshot.DeploymentSafeState} */ (reader.readEnum());
      msg.setDeploymentsafestate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParachuteSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ParachuteSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ParachuteSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ParachuteSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeployed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDeployaltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDeployminpressure();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getDeploymentsafestate();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ParachuteSnapshot.ParachuteState = {
  STOWED: 0,
  ACTIVE: 1,
  SEMIDEPLOYED: 2,
  DEPLOYED: 3,
  CUT: 4
};

/**
 * @enum {number}
 */
proto.ParachuteSnapshot.DeploymentSafeState = {
  SAFE: 0,
  RISKY: 1,
  UNSAFE: 2,
  NONE: 3
};

/**
 * optional ParachuteState state = 1;
 * @return {!proto.ParachuteSnapshot.ParachuteState}
 */
proto.ParachuteSnapshot.prototype.getState = function() {
  return /** @type {!proto.ParachuteSnapshot.ParachuteState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ParachuteSnapshot.ParachuteState} value
 * @return {!proto.ParachuteSnapshot} returns this
 */
proto.ParachuteSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool deployed = 2;
 * @return {boolean}
 */
proto.ParachuteSnapshot.prototype.getDeployed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ParachuteSnapshot} returns this
 */
proto.ParachuteSnapshot.prototype.setDeployed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional double deployAltitude = 3;
 * @return {number}
 */
proto.ParachuteSnapshot.prototype.getDeployaltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ParachuteSnapshot} returns this
 */
proto.ParachuteSnapshot.prototype.setDeployaltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double deployMinPressure = 4;
 * @return {number}
 */
proto.ParachuteSnapshot.prototype.getDeployminpressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ParachuteSnapshot} returns this
 */
proto.ParachuteSnapshot.prototype.setDeployminpressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional DeploymentSafeState deploymentSafeState = 5;
 * @return {!proto.ParachuteSnapshot.DeploymentSafeState}
 */
proto.ParachuteSnapshot.prototype.getDeploymentsafestate = function() {
  return /** @type {!proto.ParachuteSnapshot.DeploymentSafeState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.ParachuteSnapshot.DeploymentSafeState} value
 * @return {!proto.ParachuteSnapshot} returns this
 */
proto.ParachuteSnapshot.prototype.setDeploymentsafestate = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LightSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.LightSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LightSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LightSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    on: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LightSnapshot}
 */
proto.LightSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LightSnapshot;
  return proto.LightSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LightSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LightSnapshot}
 */
proto.LightSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LightSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LightSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LightSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LightSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOn();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool on = 1;
 * @return {boolean}
 */
proto.LightSnapshot.prototype.getOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.LightSnapshot} returns this
 */
proto.LightSnapshot.prototype.setOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LegSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.LegSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LegSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LegSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deployed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    grounded: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LegSnapshot}
 */
proto.LegSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LegSnapshot;
  return proto.LegSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LegSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LegSnapshot}
 */
proto.LegSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.LegSnapshot.LegState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployed(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGrounded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LegSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LegSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LegSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LegSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeployed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGrounded();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LegSnapshot.LegState = {
  RETRACTED: 0,
  DEPLOYED: 1,
  RETRACTING: 2,
  DEPLOYING: 3,
  BROKEN: 4
};

/**
 * optional LegState state = 1;
 * @return {!proto.LegSnapshot.LegState}
 */
proto.LegSnapshot.prototype.getState = function() {
  return /** @type {!proto.LegSnapshot.LegState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.LegSnapshot.LegState} value
 * @return {!proto.LegSnapshot} returns this
 */
proto.LegSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool deployed = 2;
 * @return {boolean}
 */
proto.LegSnapshot.prototype.getDeployed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.LegSnapshot} returns this
 */
proto.LegSnapshot.prototype.setDeployed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool grounded = 3;
 * @return {boolean}
 */
proto.LegSnapshot.prototype.getGrounded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.LegSnapshot} returns this
 */
proto.LegSnapshot.prototype.setGrounded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IntakeSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.IntakeSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IntakeSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntakeSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    open: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    flow: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IntakeSnapshot}
 */
proto.IntakeSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IntakeSnapshot;
  return proto.IntakeSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IntakeSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IntakeSnapshot}
 */
proto.IntakeSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpen(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFlow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IntakeSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IntakeSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IntakeSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntakeSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpen();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getFlow();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional bool open = 1;
 * @return {boolean}
 */
proto.IntakeSnapshot.prototype.getOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.IntakeSnapshot} returns this
 */
proto.IntakeSnapshot.prototype.setOpen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional double speed = 2;
 * @return {number}
 */
proto.IntakeSnapshot.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntakeSnapshot} returns this
 */
proto.IntakeSnapshot.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double flow = 3;
 * @return {number}
 */
proto.IntakeSnapshot.prototype.getFlow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntakeSnapshot} returns this
 */
proto.IntakeSnapshot.prototype.setFlow = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FairingSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.FairingSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FairingSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FairingSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    jettisoned: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FairingSnapshot}
 */
proto.FairingSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FairingSnapshot;
  return proto.FairingSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FairingSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FairingSnapshot}
 */
proto.FairingSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJettisoned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FairingSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FairingSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FairingSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FairingSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJettisoned();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool jettisoned = 1;
 * @return {boolean}
 */
proto.FairingSnapshot.prototype.getJettisoned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.FairingSnapshot} returns this
 */
proto.FairingSnapshot.prototype.setJettisoned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Propellant.prototype.toObject = function(opt_includeInstance) {
  return proto.Propellant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Propellant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Propellant.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currentamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    currentrequirement: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    totalresourceavailable: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    totalresourcecapacity: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    isdeprived: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Propellant}
 */
proto.Propellant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Propellant;
  return proto.Propellant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Propellant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Propellant}
 */
proto.Propellant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentamount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentrequirement(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalresourceavailable(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalresourcecapacity(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdeprived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Propellant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Propellant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Propellant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Propellant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrentamount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCurrentrequirement();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getTotalresourceavailable();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getTotalresourcecapacity();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getIsdeprived();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Propellant.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Propellant} returns this
 */
proto.Propellant.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double currentAmount = 2;
 * @return {number}
 */
proto.Propellant.prototype.getCurrentamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Propellant} returns this
 */
proto.Propellant.prototype.setCurrentamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double currentRequirement = 3;
 * @return {number}
 */
proto.Propellant.prototype.getCurrentrequirement = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Propellant} returns this
 */
proto.Propellant.prototype.setCurrentrequirement = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double totalResourceAvailable = 4;
 * @return {number}
 */
proto.Propellant.prototype.getTotalresourceavailable = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Propellant} returns this
 */
proto.Propellant.prototype.setTotalresourceavailable = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double totalResourceCapacity = 5;
 * @return {number}
 */
proto.Propellant.prototype.getTotalresourcecapacity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Propellant} returns this
 */
proto.Propellant.prototype.setTotalresourcecapacity = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional bool isDeprived = 6;
 * @return {boolean}
 */
proto.Propellant.prototype.getIsdeprived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Propellant} returns this
 */
proto.Propellant.prototype.setIsdeprived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EngineSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.EngineSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EngineSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EngineSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    thrust: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    thrustpercentage: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    throttle: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    specificimpulse: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    vacuumspecificimpulse: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    propellantinfoMap: (f = msg.getPropellantinfoMap()) ? f.toObject(includeInstance, proto.Propellant.toObject) : [],
    hasfuel: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    mode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    autoswitchmode: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    gimballimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    flameout: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EngineSnapshot}
 */
proto.EngineSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EngineSnapshot;
  return proto.EngineSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EngineSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EngineSnapshot}
 */
proto.EngineSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrust(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrustpercentage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpecificimpulse(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVacuumspecificimpulse(value);
      break;
    case 7:
      var value = msg.getPropellantinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Propellant.deserializeBinaryFromReader, "", new proto.Propellant());
         });
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasfuel(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoswitchmode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGimballimit(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlameout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EngineSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EngineSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EngineSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EngineSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getThrust();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getThrustpercentage();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getThrottle();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getSpecificimpulse();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getVacuumspecificimpulse();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getPropellantinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Propellant.serializeBinaryToWriter);
  }
  f = message.getHasfuel();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAutoswitchmode();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getGimballimit();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getFlameout();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.EngineSnapshot.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional double thrust = 2;
 * @return {number}
 */
proto.EngineSnapshot.prototype.getThrust = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setThrust = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double thrustPercentage = 3;
 * @return {number}
 */
proto.EngineSnapshot.prototype.getThrustpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setThrustpercentage = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double throttle = 4;
 * @return {number}
 */
proto.EngineSnapshot.prototype.getThrottle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setThrottle = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double specificImpulse = 5;
 * @return {number}
 */
proto.EngineSnapshot.prototype.getSpecificimpulse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setSpecificimpulse = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double vacuumSpecificImpulse = 6;
 * @return {number}
 */
proto.EngineSnapshot.prototype.getVacuumspecificimpulse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setVacuumspecificimpulse = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * map<string, Propellant> propellantInfo = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Propellant>}
 */
proto.EngineSnapshot.prototype.getPropellantinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Propellant>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.Propellant));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.clearPropellantinfoMap = function() {
  this.getPropellantinfoMap().clear();
  return this;};


/**
 * optional bool hasFuel = 8;
 * @return {boolean}
 */
proto.EngineSnapshot.prototype.getHasfuel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setHasfuel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string mode = 9;
 * @return {string}
 */
proto.EngineSnapshot.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool autoSwitchMode = 10;
 * @return {boolean}
 */
proto.EngineSnapshot.prototype.getAutoswitchmode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setAutoswitchmode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional double gimbalLimit = 11;
 * @return {number}
 */
proto.EngineSnapshot.prototype.getGimballimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setGimballimit = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional bool flameout = 12;
 * @return {boolean}
 */
proto.EngineSnapshot.prototype.getFlameout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.EngineSnapshot} returns this
 */
proto.EngineSnapshot.prototype.setFlameout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DockingPortSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.DockingPortSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DockingPortSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DockingPortSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shieled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DockingPortSnapshot}
 */
proto.DockingPortSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DockingPortSnapshot;
  return proto.DockingPortSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DockingPortSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DockingPortSnapshot}
 */
proto.DockingPortSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DockingPortSnapshot.DockingPortState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShieled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DockingPortSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DockingPortSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DockingPortSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DockingPortSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getShieled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.DockingPortSnapshot.DockingPortState = {
  READY: 0,
  DOCKED: 1,
  DOCKING: 2,
  UNDOCKING: 3,
  SHIELDED: 4,
  MOVING: 5,
  PREATTACHED: 6
};

/**
 * optional DockingPortState state = 1;
 * @return {!proto.DockingPortSnapshot.DockingPortState}
 */
proto.DockingPortSnapshot.prototype.getState = function() {
  return /** @type {!proto.DockingPortSnapshot.DockingPortState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.DockingPortSnapshot.DockingPortState} value
 * @return {!proto.DockingPortSnapshot} returns this
 */
proto.DockingPortSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool shieled = 2;
 * @return {boolean}
 */
proto.DockingPortSnapshot.prototype.getShieled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.DockingPortSnapshot} returns this
 */
proto.DockingPortSnapshot.prototype.setShieled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DecouplerSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.DecouplerSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DecouplerSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DecouplerSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    decoupled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DecouplerSnapshot}
 */
proto.DecouplerSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DecouplerSnapshot;
  return proto.DecouplerSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DecouplerSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DecouplerSnapshot}
 */
proto.DecouplerSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDecoupled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DecouplerSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DecouplerSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DecouplerSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DecouplerSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecoupled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool decoupled = 1;
 * @return {boolean}
 */
proto.DecouplerSnapshot.prototype.getDecoupled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.DecouplerSnapshot} returns this
 */
proto.DecouplerSnapshot.prototype.setDecoupled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControlSurfaceSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.ControlSurfaceSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControlSurfaceSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlSurfaceSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    pitchenabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    yawenabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    rollenabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    authoritylimiter: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    deployed: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControlSurfaceSnapshot}
 */
proto.ControlSurfaceSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControlSurfaceSnapshot;
  return proto.ControlSurfaceSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControlSurfaceSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControlSurfaceSnapshot}
 */
proto.ControlSurfaceSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPitchenabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setYawenabled(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRollenabled(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAuthoritylimiter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControlSurfaceSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ControlSurfaceSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ControlSurfaceSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlSurfaceSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPitchenabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getYawenabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRollenabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAuthoritylimiter();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getDeployed();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool pitchEnabled = 1;
 * @return {boolean}
 */
proto.ControlSurfaceSnapshot.prototype.getPitchenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ControlSurfaceSnapshot} returns this
 */
proto.ControlSurfaceSnapshot.prototype.setPitchenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool yawEnabled = 2;
 * @return {boolean}
 */
proto.ControlSurfaceSnapshot.prototype.getYawenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ControlSurfaceSnapshot} returns this
 */
proto.ControlSurfaceSnapshot.prototype.setYawenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool rollEnabled = 3;
 * @return {boolean}
 */
proto.ControlSurfaceSnapshot.prototype.getRollenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ControlSurfaceSnapshot} returns this
 */
proto.ControlSurfaceSnapshot.prototype.setRollenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional double authorityLimiter = 4;
 * @return {number}
 */
proto.ControlSurfaceSnapshot.prototype.getAuthoritylimiter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ControlSurfaceSnapshot} returns this
 */
proto.ControlSurfaceSnapshot.prototype.setAuthoritylimiter = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool deployed = 5;
 * @return {boolean}
 */
proto.ControlSurfaceSnapshot.prototype.getDeployed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ControlSurfaceSnapshot} returns this
 */
proto.ControlSurfaceSnapshot.prototype.setDeployed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CargoBaySnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.CargoBaySnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CargoBaySnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CargoBaySnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deploypercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CargoBaySnapshot}
 */
proto.CargoBaySnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CargoBaySnapshot;
  return proto.CargoBaySnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CargoBaySnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CargoBaySnapshot}
 */
proto.CargoBaySnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CargoBaySnapshot.CargoBayState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeploypercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CargoBaySnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CargoBaySnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CargoBaySnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CargoBaySnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeploypercent();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.CargoBaySnapshot.CargoBayState = {
  CLOSED: 0,
  OPEN: 1,
  CLOSING: 2,
  OPENING: 3
};

/**
 * optional CargoBayState state = 1;
 * @return {!proto.CargoBaySnapshot.CargoBayState}
 */
proto.CargoBaySnapshot.prototype.getState = function() {
  return /** @type {!proto.CargoBaySnapshot.CargoBayState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.CargoBaySnapshot.CargoBayState} value
 * @return {!proto.CargoBaySnapshot} returns this
 */
proto.CargoBaySnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double deployPercent = 2;
 * @return {number}
 */
proto.CargoBaySnapshot.prototype.getDeploypercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CargoBaySnapshot} returns this
 */
proto.CargoBaySnapshot.prototype.setDeploypercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AntennaSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.AntennaSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AntennaSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AntennaSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AntennaSnapshot}
 */
proto.AntennaSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AntennaSnapshot;
  return proto.AntennaSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AntennaSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AntennaSnapshot}
 */
proto.AntennaSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AntennaSnapshot.AntennaState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AntennaSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AntennaSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AntennaSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AntennaSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.AntennaSnapshot.AntennaState = {
  RETRACTED: 0,
  EXTENDED: 1,
  RETRACTING: 2,
  EXTENDING: 3,
  BROKEN: 4
};

/**
 * optional AntennaState state = 1;
 * @return {!proto.AntennaSnapshot.AntennaState}
 */
proto.AntennaSnapshot.prototype.getState = function() {
  return /** @type {!proto.AntennaSnapshot.AntennaState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.AntennaSnapshot.AntennaState} value
 * @return {!proto.AntennaSnapshot} returns this
 */
proto.AntennaSnapshot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PartSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.PartSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PartSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PartSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mass: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    shielded: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    skintemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    antenna: (f = msg.getAntenna()) && proto.AntennaSnapshot.toObject(includeInstance, f),
    cargobay: (f = msg.getCargobay()) && proto.CargoBaySnapshot.toObject(includeInstance, f),
    controlsurface: (f = msg.getControlsurface()) && proto.ControlSurfaceSnapshot.toObject(includeInstance, f),
    decoupler: (f = msg.getDecoupler()) && proto.DecouplerSnapshot.toObject(includeInstance, f),
    dockingport: (f = msg.getDockingport()) && proto.DockingPortSnapshot.toObject(includeInstance, f),
    engine: (f = msg.getEngine()) && proto.EngineSnapshot.toObject(includeInstance, f),
    fairing: (f = msg.getFairing()) && proto.FairingSnapshot.toObject(includeInstance, f),
    intake: (f = msg.getIntake()) && proto.IntakeSnapshot.toObject(includeInstance, f),
    leg: (f = msg.getLeg()) && proto.LegSnapshot.toObject(includeInstance, f),
    light: (f = msg.getLight()) && proto.LightSnapshot.toObject(includeInstance, f),
    parachute: (f = msg.getParachute()) && proto.ParachuteSnapshot.toObject(includeInstance, f),
    radiator: (f = msg.getRadiator()) && proto.RadiatorSnapshot.toObject(includeInstance, f),
    rcs: (f = msg.getRcs()) && proto.RCSSnapshot.toObject(includeInstance, f),
    reactionwheel: (f = msg.getReactionwheel()) && proto.ReactionWheelSnapshot.toObject(includeInstance, f),
    resourceconverter: (f = msg.getResourceconverter()) && proto.ResourceConverterSnapshot.toObject(includeInstance, f),
    resourceharvester: (f = msg.getResourceharvester()) && proto.ResourceHarvesterSnapshot.toObject(includeInstance, f),
    sensor: (f = msg.getSensor()) && proto.SensorSnapshot.toObject(includeInstance, f),
    solarpanel: (f = msg.getSolarpanel()) && proto.SolarPanelSnapshot.toObject(includeInstance, f),
    wheel: (f = msg.getWheel()) && proto.WheelSnapshot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PartSnapshot}
 */
proto.PartSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PartSnapshot;
  return proto.PartSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PartSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PartSnapshot}
 */
proto.PartSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMass(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShielded(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemperature(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSkintemperature(value);
      break;
    case 6:
      var value = new proto.AntennaSnapshot;
      reader.readMessage(value,proto.AntennaSnapshot.deserializeBinaryFromReader);
      msg.setAntenna(value);
      break;
    case 7:
      var value = new proto.CargoBaySnapshot;
      reader.readMessage(value,proto.CargoBaySnapshot.deserializeBinaryFromReader);
      msg.setCargobay(value);
      break;
    case 8:
      var value = new proto.ControlSurfaceSnapshot;
      reader.readMessage(value,proto.ControlSurfaceSnapshot.deserializeBinaryFromReader);
      msg.setControlsurface(value);
      break;
    case 9:
      var value = new proto.DecouplerSnapshot;
      reader.readMessage(value,proto.DecouplerSnapshot.deserializeBinaryFromReader);
      msg.setDecoupler(value);
      break;
    case 10:
      var value = new proto.DockingPortSnapshot;
      reader.readMessage(value,proto.DockingPortSnapshot.deserializeBinaryFromReader);
      msg.setDockingport(value);
      break;
    case 11:
      var value = new proto.EngineSnapshot;
      reader.readMessage(value,proto.EngineSnapshot.deserializeBinaryFromReader);
      msg.setEngine(value);
      break;
    case 12:
      var value = new proto.FairingSnapshot;
      reader.readMessage(value,proto.FairingSnapshot.deserializeBinaryFromReader);
      msg.setFairing(value);
      break;
    case 13:
      var value = new proto.IntakeSnapshot;
      reader.readMessage(value,proto.IntakeSnapshot.deserializeBinaryFromReader);
      msg.setIntake(value);
      break;
    case 14:
      var value = new proto.LegSnapshot;
      reader.readMessage(value,proto.LegSnapshot.deserializeBinaryFromReader);
      msg.setLeg(value);
      break;
    case 15:
      var value = new proto.LightSnapshot;
      reader.readMessage(value,proto.LightSnapshot.deserializeBinaryFromReader);
      msg.setLight(value);
      break;
    case 16:
      var value = new proto.ParachuteSnapshot;
      reader.readMessage(value,proto.ParachuteSnapshot.deserializeBinaryFromReader);
      msg.setParachute(value);
      break;
    case 17:
      var value = new proto.RadiatorSnapshot;
      reader.readMessage(value,proto.RadiatorSnapshot.deserializeBinaryFromReader);
      msg.setRadiator(value);
      break;
    case 18:
      var value = new proto.RCSSnapshot;
      reader.readMessage(value,proto.RCSSnapshot.deserializeBinaryFromReader);
      msg.setRcs(value);
      break;
    case 19:
      var value = new proto.ReactionWheelSnapshot;
      reader.readMessage(value,proto.ReactionWheelSnapshot.deserializeBinaryFromReader);
      msg.setReactionwheel(value);
      break;
    case 20:
      var value = new proto.ResourceConverterSnapshot;
      reader.readMessage(value,proto.ResourceConverterSnapshot.deserializeBinaryFromReader);
      msg.setResourceconverter(value);
      break;
    case 21:
      var value = new proto.ResourceHarvesterSnapshot;
      reader.readMessage(value,proto.ResourceHarvesterSnapshot.deserializeBinaryFromReader);
      msg.setResourceharvester(value);
      break;
    case 22:
      var value = new proto.SensorSnapshot;
      reader.readMessage(value,proto.SensorSnapshot.deserializeBinaryFromReader);
      msg.setSensor(value);
      break;
    case 23:
      var value = new proto.SolarPanelSnapshot;
      reader.readMessage(value,proto.SolarPanelSnapshot.deserializeBinaryFromReader);
      msg.setSolarpanel(value);
      break;
    case 24:
      var value = new proto.WheelSnapshot;
      reader.readMessage(value,proto.WheelSnapshot.deserializeBinaryFromReader);
      msg.setWheel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PartSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PartSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PartSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PartSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMass();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getShielded();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getSkintemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAntenna();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.AntennaSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getCargobay();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.CargoBaySnapshot.serializeBinaryToWriter
    );
  }
  f = message.getControlsurface();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ControlSurfaceSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getDecoupler();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.DecouplerSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getDockingport();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.DockingPortSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getEngine();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.EngineSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getFairing();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.FairingSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getIntake();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.IntakeSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getLeg();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.LegSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getLight();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.LightSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getParachute();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.ParachuteSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getRadiator();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.RadiatorSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getRcs();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.RCSSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getReactionwheel();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.ReactionWheelSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getResourceconverter();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.ResourceConverterSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getResourceharvester();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.ResourceHarvesterSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getSensor();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.SensorSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getSolarpanel();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.SolarPanelSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getWheel();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.WheelSnapshot.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.PartSnapshot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double mass = 2;
 * @return {number}
 */
proto.PartSnapshot.prototype.getMass = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.setMass = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool shielded = 3;
 * @return {boolean}
 */
proto.PartSnapshot.prototype.getShielded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.setShielded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional double temperature = 4;
 * @return {number}
 */
proto.PartSnapshot.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double skinTemperature = 5;
 * @return {number}
 */
proto.PartSnapshot.prototype.getSkintemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.setSkintemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional AntennaSnapshot antenna = 6;
 * @return {?proto.AntennaSnapshot}
 */
proto.PartSnapshot.prototype.getAntenna = function() {
  return /** @type{?proto.AntennaSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.AntennaSnapshot, 6));
};


/**
 * @param {?proto.AntennaSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearAntenna = function() {
  return this.setAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasAntenna = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CargoBaySnapshot cargoBay = 7;
 * @return {?proto.CargoBaySnapshot}
 */
proto.PartSnapshot.prototype.getCargobay = function() {
  return /** @type{?proto.CargoBaySnapshot} */ (
    jspb.Message.getWrapperField(this, proto.CargoBaySnapshot, 7));
};


/**
 * @param {?proto.CargoBaySnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setCargobay = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearCargobay = function() {
  return this.setCargobay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasCargobay = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ControlSurfaceSnapshot controlSurface = 8;
 * @return {?proto.ControlSurfaceSnapshot}
 */
proto.PartSnapshot.prototype.getControlsurface = function() {
  return /** @type{?proto.ControlSurfaceSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.ControlSurfaceSnapshot, 8));
};


/**
 * @param {?proto.ControlSurfaceSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setControlsurface = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearControlsurface = function() {
  return this.setControlsurface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasControlsurface = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DecouplerSnapshot decoupler = 9;
 * @return {?proto.DecouplerSnapshot}
 */
proto.PartSnapshot.prototype.getDecoupler = function() {
  return /** @type{?proto.DecouplerSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.DecouplerSnapshot, 9));
};


/**
 * @param {?proto.DecouplerSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setDecoupler = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearDecoupler = function() {
  return this.setDecoupler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasDecoupler = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DockingPortSnapshot dockingPort = 10;
 * @return {?proto.DockingPortSnapshot}
 */
proto.PartSnapshot.prototype.getDockingport = function() {
  return /** @type{?proto.DockingPortSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.DockingPortSnapshot, 10));
};


/**
 * @param {?proto.DockingPortSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setDockingport = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearDockingport = function() {
  return this.setDockingport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasDockingport = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional EngineSnapshot engine = 11;
 * @return {?proto.EngineSnapshot}
 */
proto.PartSnapshot.prototype.getEngine = function() {
  return /** @type{?proto.EngineSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.EngineSnapshot, 11));
};


/**
 * @param {?proto.EngineSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setEngine = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearEngine = function() {
  return this.setEngine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional FairingSnapshot fairing = 12;
 * @return {?proto.FairingSnapshot}
 */
proto.PartSnapshot.prototype.getFairing = function() {
  return /** @type{?proto.FairingSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.FairingSnapshot, 12));
};


/**
 * @param {?proto.FairingSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setFairing = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearFairing = function() {
  return this.setFairing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasFairing = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional IntakeSnapshot intake = 13;
 * @return {?proto.IntakeSnapshot}
 */
proto.PartSnapshot.prototype.getIntake = function() {
  return /** @type{?proto.IntakeSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.IntakeSnapshot, 13));
};


/**
 * @param {?proto.IntakeSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setIntake = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearIntake = function() {
  return this.setIntake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasIntake = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional LegSnapshot leg = 14;
 * @return {?proto.LegSnapshot}
 */
proto.PartSnapshot.prototype.getLeg = function() {
  return /** @type{?proto.LegSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.LegSnapshot, 14));
};


/**
 * @param {?proto.LegSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setLeg = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearLeg = function() {
  return this.setLeg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasLeg = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional LightSnapshot light = 15;
 * @return {?proto.LightSnapshot}
 */
proto.PartSnapshot.prototype.getLight = function() {
  return /** @type{?proto.LightSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.LightSnapshot, 15));
};


/**
 * @param {?proto.LightSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setLight = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearLight = function() {
  return this.setLight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasLight = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ParachuteSnapshot parachute = 16;
 * @return {?proto.ParachuteSnapshot}
 */
proto.PartSnapshot.prototype.getParachute = function() {
  return /** @type{?proto.ParachuteSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.ParachuteSnapshot, 16));
};


/**
 * @param {?proto.ParachuteSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setParachute = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearParachute = function() {
  return this.setParachute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasParachute = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RadiatorSnapshot radiator = 17;
 * @return {?proto.RadiatorSnapshot}
 */
proto.PartSnapshot.prototype.getRadiator = function() {
  return /** @type{?proto.RadiatorSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.RadiatorSnapshot, 17));
};


/**
 * @param {?proto.RadiatorSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setRadiator = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearRadiator = function() {
  return this.setRadiator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasRadiator = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RCSSnapshot rcs = 18;
 * @return {?proto.RCSSnapshot}
 */
proto.PartSnapshot.prototype.getRcs = function() {
  return /** @type{?proto.RCSSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.RCSSnapshot, 18));
};


/**
 * @param {?proto.RCSSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setRcs = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearRcs = function() {
  return this.setRcs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasRcs = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ReactionWheelSnapshot reactionWheel = 19;
 * @return {?proto.ReactionWheelSnapshot}
 */
proto.PartSnapshot.prototype.getReactionwheel = function() {
  return /** @type{?proto.ReactionWheelSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.ReactionWheelSnapshot, 19));
};


/**
 * @param {?proto.ReactionWheelSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setReactionwheel = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearReactionwheel = function() {
  return this.setReactionwheel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasReactionwheel = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ResourceConverterSnapshot resourceConverter = 20;
 * @return {?proto.ResourceConverterSnapshot}
 */
proto.PartSnapshot.prototype.getResourceconverter = function() {
  return /** @type{?proto.ResourceConverterSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.ResourceConverterSnapshot, 20));
};


/**
 * @param {?proto.ResourceConverterSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setResourceconverter = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearResourceconverter = function() {
  return this.setResourceconverter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasResourceconverter = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ResourceHarvesterSnapshot resourceHarvester = 21;
 * @return {?proto.ResourceHarvesterSnapshot}
 */
proto.PartSnapshot.prototype.getResourceharvester = function() {
  return /** @type{?proto.ResourceHarvesterSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.ResourceHarvesterSnapshot, 21));
};


/**
 * @param {?proto.ResourceHarvesterSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setResourceharvester = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearResourceharvester = function() {
  return this.setResourceharvester(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasResourceharvester = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional SensorSnapshot sensor = 22;
 * @return {?proto.SensorSnapshot}
 */
proto.PartSnapshot.prototype.getSensor = function() {
  return /** @type{?proto.SensorSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.SensorSnapshot, 22));
};


/**
 * @param {?proto.SensorSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setSensor = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearSensor = function() {
  return this.setSensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasSensor = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional SolarPanelSnapshot solarPanel = 23;
 * @return {?proto.SolarPanelSnapshot}
 */
proto.PartSnapshot.prototype.getSolarpanel = function() {
  return /** @type{?proto.SolarPanelSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.SolarPanelSnapshot, 23));
};


/**
 * @param {?proto.SolarPanelSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setSolarpanel = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearSolarpanel = function() {
  return this.setSolarpanel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasSolarpanel = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional WheelSnapshot wheel = 24;
 * @return {?proto.WheelSnapshot}
 */
proto.PartSnapshot.prototype.getWheel = function() {
  return /** @type{?proto.WheelSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.WheelSnapshot, 24));
};


/**
 * @param {?proto.WheelSnapshot|undefined} value
 * @return {!proto.PartSnapshot} returns this
*/
proto.PartSnapshot.prototype.setWheel = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PartSnapshot} returns this
 */
proto.PartSnapshot.prototype.clearWheel = function() {
  return this.setWheel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PartSnapshot.prototype.hasWheel = function() {
  return jspb.Message.getField(this, 24) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SnapshotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SnapshotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SnapshotResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    vessel: (f = msg.getVessel()) && proto.VesselSnapshot.toObject(includeInstance, f),
    flight: (f = msg.getFlight()) && proto.FlightSnapshot.toObject(includeInstance, f),
    orbit: (f = msg.getOrbit()) && proto.OrbitSnapshot.toObject(includeInstance, f),
    partsMap: (f = msg.getPartsMap()) ? f.toObject(includeInstance, proto.PartSnapshot.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SnapshotResponse}
 */
proto.SnapshotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SnapshotResponse;
  return proto.SnapshotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SnapshotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SnapshotResponse}
 */
proto.SnapshotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VesselSnapshot;
      reader.readMessage(value,proto.VesselSnapshot.deserializeBinaryFromReader);
      msg.setVessel(value);
      break;
    case 2:
      var value = new proto.FlightSnapshot;
      reader.readMessage(value,proto.FlightSnapshot.deserializeBinaryFromReader);
      msg.setFlight(value);
      break;
    case 3:
      var value = new proto.OrbitSnapshot;
      reader.readMessage(value,proto.OrbitSnapshot.deserializeBinaryFromReader);
      msg.setOrbit(value);
      break;
    case 4:
      var value = msg.getPartsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readMessage, proto.PartSnapshot.deserializeBinaryFromReader, 0, new proto.PartSnapshot());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SnapshotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SnapshotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SnapshotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVessel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VesselSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getFlight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FlightSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getOrbit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OrbitSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getPartsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeMessage, proto.PartSnapshot.serializeBinaryToWriter);
  }
};


/**
 * optional VesselSnapshot vessel = 1;
 * @return {?proto.VesselSnapshot}
 */
proto.SnapshotResponse.prototype.getVessel = function() {
  return /** @type{?proto.VesselSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.VesselSnapshot, 1));
};


/**
 * @param {?proto.VesselSnapshot|undefined} value
 * @return {!proto.SnapshotResponse} returns this
*/
proto.SnapshotResponse.prototype.setVessel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SnapshotResponse} returns this
 */
proto.SnapshotResponse.prototype.clearVessel = function() {
  return this.setVessel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SnapshotResponse.prototype.hasVessel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FlightSnapshot flight = 2;
 * @return {?proto.FlightSnapshot}
 */
proto.SnapshotResponse.prototype.getFlight = function() {
  return /** @type{?proto.FlightSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.FlightSnapshot, 2));
};


/**
 * @param {?proto.FlightSnapshot|undefined} value
 * @return {!proto.SnapshotResponse} returns this
*/
proto.SnapshotResponse.prototype.setFlight = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SnapshotResponse} returns this
 */
proto.SnapshotResponse.prototype.clearFlight = function() {
  return this.setFlight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SnapshotResponse.prototype.hasFlight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OrbitSnapshot orbit = 3;
 * @return {?proto.OrbitSnapshot}
 */
proto.SnapshotResponse.prototype.getOrbit = function() {
  return /** @type{?proto.OrbitSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.OrbitSnapshot, 3));
};


/**
 * @param {?proto.OrbitSnapshot|undefined} value
 * @return {!proto.SnapshotResponse} returns this
*/
proto.SnapshotResponse.prototype.setOrbit = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SnapshotResponse} returns this
 */
proto.SnapshotResponse.prototype.clearOrbit = function() {
  return this.setOrbit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SnapshotResponse.prototype.hasOrbit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<int64, PartSnapshot> parts = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PartSnapshot>}
 */
proto.SnapshotResponse.prototype.getPartsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PartSnapshot>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.PartSnapshot));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.SnapshotResponse} returns this
 */
proto.SnapshotResponse.prototype.clearPartsMap = function() {
  this.getPartsMap().clear();
  return this;};


goog.object.extend(exports, proto);
